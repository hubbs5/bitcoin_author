OpenPGP Implementations and Relatedlocally hosted softwareTom Zerucha's reference OpenPGP      implementation (C code, uses openSSL library, BSD license --      home site?)Adam Back's pgpdsa minimalistic openPGP      compatible dsa signature code (C code, uses openSSL library,      public domain code -- home site)  Adam Back / Henry Hastur's PGP stealth      (version 1.x by Henry Hastur (a nym), version 2.x mods by      Adam Back) PGP 2.x steganography tool for PGP to normalize PGP      messages (C code, open source -- home site)pointers to remotely hosted softwarePGP Corporationall       pgp source and binaries (as of pgp 5: C++ code,      commercial only versions plus non-commercial use versions      zedz.net crypto collection)Glueck and Kanja Technologies (formerly Biodata) OpenPGP compatible      product suite CryptoEx.        Includes OpenPGP and S/MIME compatibility, outlook and lotus notes      plugins, comprehensive smart card support, key servers and enterprise      administration tools.  Also have OpenPGP toolkits.  (Commercial      license plus freeware outlook plugin).Gnu Privacy Guard GPG full      openPGP implementation (C code, uses own crypto library, GNU GPL      license -- link)Hushmail version 2 is based on OpenPGP       hush.  Anonymizer Inc's       mixmaster      remailer software (version 2 written by Lance Cottrell (of      Anonymizer), then re-written for version 3 by Ulf Moeller      outside US due to US export regulations at that time; currently      maintained by Len Sassaman) includes quite complete native      OpenPGP support for type I remailer support (C code, uses      OpenSSL crypto library, open source license -- link)SSH2 has partial OpenPGP support       ssh2Peter Gutmann's       cryptlib      and cryptlib site robust      general crypto library with open source and full PGP      support -- support PGP keyrings, just as read-only key stores      (actually it could do write as well, but it encourages      use of the protocol-agnostic PKCS #15 rather than PGP,       PKCS #12, etc) (C code, sleepycat license -- users choice      of GPL or commercial -- link).Veridis FileCrypt SDK      openPGP implementation in library form (C/C++ code, commercial       license)Benjamin Trott's       Crypt::OpenPGP perl module openPGP implementation (perl code,       opensource: Artistic License -- link)Cryptix Foundation's       cryptix      openpgp implementation of openPGP (java code, BSD license      -- link)Kazuhiko Yamamoto's       pgpdump      openPGP file analyser (C code, open source license -- link)John Callas'       PGPDump      and       PGPMiniCertLib(C, non-commercial use license -- link)Mark Shoulsen's PGPacket       openPGP file analyser (perl code, open source -- link)Salvo Salasio's        OpenPGP packet parserInternet Drafts      forward secrecy Forward Secrecy Extensions for OpenPGP,      Brown, Back, Laurie (how to add forward-secrecy to      OpenPGP -- forward-secrecy makes it harder for someone to obtain      your private key -- because the private keys are deleted as soon      as practical after use).      replacement key Key Replacement for Revoked Keys in OpenPGP,      Shaw (something about replacing revoked keys)ReferencesThe       ietf-openpgp page at IMCThe ietf-openpgp             list archivesStandards IETF and de-factoRFC-1991 PGP Message      Exchange Formats, Atkins, Stallings, Zimmermann      (PGP-2.x message formats)      RFC-2440 (bis 03 -- latest revision) OpenPGP Message Format,      Callas, Donnerhacke, Finney, Thayer (openPGP message      formats)[RFC-2440 (original) OpenPGP      Message Format, Callas, Donnerhacke, Finney, Thayer      (openPGP message formats)]RFC-2015 MIME security      with Pretty Good Privacy (PGP), Elkins (PGP-2.x MIME)RFC-3156 MIME security      with OpenPGP, Elkins, Del Torto, Levien, Roessler      (openPGP MIME)ReferencesThe       ietf-openpgp page at IMCMore general area       openPGP and S/MIME IMC web page with PGP/MIME refs.A       link
Cypherpunks anti-LicenseIntentThe intent of the Cypherpunks anti-License (CPL) is to inform users thatthey are free to use and redistribute the indicated work or any derived ormodified work in any manner they choose.  Works distributed under the CPLare in the Public Domain.LicensingThe CPL is not a license, it does not require the user to do or not doanything; the user does not agree to any terms, because there are no terms,and the user does not need to do anything to indicate acceptance orrejection of the CPL.Non LitigationThe CPL serves to pledge to the user that the distributors will behave in amanner consistent with the non-existance of Intellectual Property (IP) lawsas far as they are able.  The distributors will not use or participate asfar as they are able to government legal systems to attempt to enforcerequests restricting the use, modifications, or redistribution of the workfor perpetuity.  The distributor may prefer to be anonymous to precludeattempts to coerce them into enforcing IP laws relating to this work againsttheir will.RequestsThe work may be distributed with some distributor requests in addition tothe CPL.  The distributor pledges similarly to not attempt to use IP laws toenforce these requests.RedistributionUsers choosing to redistribute this work may change anything about the work,including distributing it under a different license, and adding or removingprevious distributors requests.InterpretationThe CPL is completely liberal.  Here are some examples of implications ofthis which are not true for many licenses.  The user can redistribute thework or a derived or modified workunder a different license of their choosing  with or without source code as they choose  without acknowledging the distributors or authors  with false or innaccurate claims about authorship of the work  advertise without acknowledging the authorsRequests can be arbitrary, but are requests only.  Example of requests thatthe distributor may choose to make:that improvements to the work be drawn to the distributors attention  that improvements to the work be released back to the distributor      under the CPL  that the distributors name not be used to advertise derived works      without the distributors approvalLegacy ConsiderationsThe distributor may choose to inform the user of his opinion of the IPstatus of the work, for example by identifying any IP law restricted aspectssuch as the copyright holders of parts or the whole of the work, trademarkowners of trademarks used in the work, potentially applicable patents onalgorithms or ideas contained in the work, but the distributor is notobliged to do so and takes no responsibility for the accuracy of suchinformation.BackgroundThe CPL is written from a mindset which derides the very concept ofIntellectual Property restrictions as being incompatible with a freesociety.Cryptographically assured anonymity and anonymous use of Internet resourcesmean that denizens of cypherspace can ignore copyright, licenses attemptingto control use and distribution of works, and patents on ideas.  It is notpossible to enforce IP laws by calls to government legal systems when theflaunter is strongly anonymous.The enforcement of IP law and anonymity are in direct conflict.  To fullyenforce IP laws, anonymity would have to be outlawed.  Cypherpunks believethis would be a bad thing, because control of information imparts power, andanonymity gives individuals control over disclosure of information aboutthemselves and their actions.
GR (GAK Resistant) Design PrinciplesIf we take the design goal of designing systems includingconfidentiality which are resistant to government plans for GAK, wecan succinctly state this design goal as the task of ensuring that: at no point will any data transferred over communications links be     accessible to anyone other than the sender and messaging     recipient with out also obtaining data residing on     storage devices under the recipient or senders controlWe can derive design principles useful in maximising the GAKresistancy (GR) property from this goal:principle 1: no keys used to secure communications inany part of the system are a-priori escrowed with third partiesprinciple 2: second crypto recipients on encryptedcommunications should not be used to allow access to third parties whoare not messaging recipients manually selected by the senderprinciple 3: communications should be encrypted to the minimumnumber of recipients (typically one), and those keys should have asshort a life time as is practically possibleprinciple 4: deployment wins.  Violating any ofprinciples 1, 2 or 3 whilst still remaining better than GAK-neutralcan be justified where deployment is thereby increased to the extentthat the reduced GAK resistance of the product can be justified by theoverall increase in GAK resistancy in the target jurisdictions.  Thiscan be expressed loosely as the equation: introduced resistancy =deployment x resistancy ratingCorollariesCorollary 1: Included in design principle 2) is the principleof not re-transmitting keys or data after decryption to third parties -- that is just structuring -- and violates design principle 2.Corollary 2: where communications are transmitted in wayswhich violate principles 1, 2 or 3 it is in general more GAK resistantto enforce as far as possible that the recovery or escrow informationremains in as close proximity to the data as possible, and as muchunder the control of the user as possible.Corollary 3: where communications are transmitted whichviolate principles 1, 2 or 3 it is in general more GAK resistant tomake these communications as difficult to automate as possible.  Forexample no scripting support is given thereby weakly enforcing thatGUI user interaction is required, and/or that the recovery process ismade artificially time consuming (by not storing all bits of the keythereby weakly forcing the use of brute force to recover the key),and/or that the communication could use non electronic, or hard toautomate communication channelsCorollary 4: Where a profit function outside theindividuals control interferes with GR maximisation of principle 4,continuing in this environment may be justifiable where this tactichelps promote global GAK resistance in the target jursidiction.Examples of novel ways of making the best of this imposed profitfunction overlayed on the solution space of designs may be: attemptsto subvert standardisation processes to make the standards GAKresistant even for GAK neutral developers, or to code GAK resistantimplementations for GR-neutral employers without informing them ofthese coding decisions, or to promote GR implementation and protocoldesign to contacts in the cryptographic developer community, or toanonymously release useful proprietary GR optimisation technology, orto sabotage ergonomics or reliability functions in implementations ofvery low GR rated designs.This is a work in progress.  Comments are sought on clarity, and oncorrectness.  Discussion has been occurring on the cypherpunks and onietf-open-pgp mailing lists.Comments to the lists or to me(Adam Back) at
Ciphersaber Memorable Test VectorsArnold Reinhold's ciphersaber-2 is a simple crypto system based on Ron Rivest's RC4 which is designed to be bothdirectly usable and simple enough to implement from memory forsituations where being caught with crypto software on your machine isdangerous (for example in countries where crypto software is illegalto use).However despite the crypto system itself being sufficienlty simplethere remains fair risk that a mistake is made implementing it.Arnold provides test vectors for this purpose (see copycs2-vector1.txt in this package), however it seems to me thatif being caught with crypto software is a problem then being caughtwith a ciphersaber-2 test-vector is probably also a problem; andwithout the test vector it seems quite likely that mistakes will bemade that make it firstly not interoperable, but more dangerouslyprobably weak, and quite possibly fatally weak.So to address this problem I had a go at writing software to findhuman readable test vectors.The software can be downloaded here source/.The SearchI have not myself spent much time looking for satisfyingly witty,topical and memorable phrases.  I'll appoint Arnold as the judge andlet you the reader see what you can come up with using the software.The winning test-vector phrases will go here.  Perhaps Arnold willmake some honorary 2nd level Cipher Knighthood and certificate forproducing the coolest phrase which is also a ciphersaber-2 testvector.SoftwareThe rest of this document describes the software in this package.The unix software can be downloaded here source.  It uses Dan Bernstein's CDB, but the most recent version at time ofwriting is included.  If you want to check for more recent versions(not that I see a need to unless a bug is found, or later versions arefaster) you can check here http://cr.yp.to/cdb.htmlThe version included is 0.75.perl cs2The program cs2.pl is a perl implementation ofciphersaber-2.  The program cs1.pl is a perl implementationof ciphersaber-1.  The only difference between the ciphersaber-1 andciphersaber-2 implementations is that the ciphersaber-1 implementationdefaults to 1 round and the ciphersaber-2 implementation defaults to20 rounds of the RC4 key-schedule function.  The 20 rounds comes fromArnold's comment that he recommends a value of r=20 or more forciphersaber-2.The perl program cs2.pl can be used as follows:The test vector cs2-vector1.bin is a binary version of theciphersaber-2 test vector given here.The hex version from the ciphersaber FAQ web page is cs2-vector1.txt.  You can convert the hex version into binarywith the dehex.pl program as follows:% dehex.pl  cs2-vector1.binTo try the test vector run:% cs2.pl -d -k="asdfg" -r=10 < cs2-vector1.binThis is a test of CipherSaber-2.(The test vector seems to be defined with a non-default number ofrounds: 10).  Or directly from the hex version:% dehex.pl < cs2-vector1.txt | cs2.pl -d -k="asdfg" -r=10This is a test of CipherSaber-2.When encrypting you have to give an IV:% echo -n hello world | cs2.pl -l=3 -i=abc -k=def | cs2.pl -d -l=3 -k=defhello worldThe default iv length is 10 (for compatibility with otherciphersaber programs).  To give a different length of iv, you canspecify the IV length with the -l option as shown above, or if youomit it you get the default IV length:% echo -n hello world | cs2.pl -i=abcdefghij -k=def | cs2.pl -d -k=defhello worldIf the IV given is shorter than the IV length (specified ordefault) then the missing characters of IV are considered to beascii(0).  This behavior may or may not match other ciphersaberimplementations.Human memorable test vectorsThe software in this package is for computing human readable testvectors for ciphersaber.  The package supports creating test vectorsfor ciphersaber-1, ciphersaber-2 and RC4.  Note with RC4 there is noIV.First you must choose a word list.  Most unix systems have one in/usr/share/dict/words or similar locations.  You might want to add theemacs m-x spook function's spook.lines file (included in the packagein suitable format) -- to find cool phrases you'll want an interestingword set.  The longer the word list and the more full of uninterestingwords, the longer it will take you to find an interesting phrase.Then split the words up into groups of words of different length.Because the rate of english language is much lower than 1 the longerthe word is the less likely you are to find a test vector involvingit.  So it's probably only worth using words up to length 6 or 7.Run wordsplit.csh to create sorted unique word lists organised byword length in files with name of the word-length (1 2 3 etc) in thecurrent directory.  The arguments to wordsplit.csh are the word filesyou're working from, which must have format of one word (orword-phrase) per line.% wordsplit.csh /usr/share/dict/words spook.linesThis will create files 1 2 3 4 etc.Then you have to precomute xor pairs to speed up the computation.It takes about 1Gb of disk space to store precomputation databases forwords of length 1-7, about 500Mb for lengths 1-6, about 245Mb forlengths 1-5 and about 62Mb for lengths 1-4 (of course these figuresdepend on the sizes of the word sets you use).(Choose arguments to precompute.csh according to how much diskspace you have and the longest word you intend to search for as aplaintext / ciphertext word.  Note the longer the word, the longer thesearch takes -- length 7 are going to be pretty slow to search for dueto the English language rate issue described above).  The firstargument to precompute.csh is a directory to store the precomputationdatabases in, the rest of the arguments are files containing onlywords of the length of the filename.% precompute.csh db 1 2 3 4Then choose your cipher -- presumably ciphersaber-2 asciphersaber-1 is not considered strong anymore following Shamir'sattack on the 802.11 RC4 mode (which is similar to ciphersaber-1).The argument -c2 asks for ciphersaber-2, -c1 for ciphersaber-1 and -c0for RC4.  Note RC4 does not have an IV, whereas ciphersaber-1 andciphersaber-2 do.You can get a quick usage with encrypt -h.Then you should choose how many words will be used for the key andiv.  The default iv length is 10, but trailing spaces are placed afterthe words to make the ciphertext nicely formatted.  Starting at theend of the list, as many of the words as necessary will be first usedfor the iv to make it up to it's required size (default 10 chars),then the rest of the words will be used for the key.  The followingexample will try groups of 3 words for the key and IV.  For thedefault iv length of 10, the possible word lengths for the IV arepermutations of 1 1 5, 1 2 4, 1 3 3, 2 2 3, 1 7, 2 6, 3 5, 4 4, 9.But you don't have to worry about that you can just specify ranges ofword lengths and the program will figure it out.  To try all of thoseranges you could put: 3 1-9 1-9 1-9.  Following the key and iv lengthscomes your choice of plaintext / ciphertext word-length (the plaintextand ciphertext are each one word, and the words are the same length).There have to be-precomputed xor-pair databases for any plaintext /ciphertext word-lengths.% csvec -c2 db 3 1-9 1-9 1-9 4 /usr/share/dict/wordswhere db was the directory you gave earlier toprecompute.csh.It will output things like:k="Al",iv="Al Dakota ": buys mead, geld huts, guts held, guys headwhich can be checked with the perl ciphersaber-2 implementation asfollows for decryption:% echo -n "Al Dakota buys" | cs2.pl -d -k="Al"meador with encryption:% echo -n "mead" | cs2.pl -i="Al Dakota " -k="Al"Al Dakota buysEach of the comma separated word pairs are alternate plaintext /ciphertext pairs that happen to xor to the same string, so these alsowork:% echo -n "Al Dakota geld" | cs2.pl -d -k="Al"huts% echo -n "Al Dakota guts" | cs2.pl -d -k="Al"held% echo -n "Al Dakota guys" | cs2.pl -d -k="Al"headand xor is commutative so ciphertext and plaintext pair can beswapped and these work also:% echo -n "Al Dakota mead" | cs2.pl -d -k="Al"buys% echo -n "Al Dakota huts" | cs2.pl -d -k="Al"geld% echo -n "Al Dakota held" | cs2.pl -d -k="Al"guts% echo -n "Al Dakota head" | cs2.pl -d -k="Al"guysThe codeThe code is not that well tested, and kind of hacked together.  Ifyou make improvements or get it to compile on other operating systemsthan linux, send me the patches.Comments, html bugs to  (Adam Back) at 
Another SSL breakageThere were two independent cracks of Hal's 1st challenge.  First toannounce was Damien Doligez, a researcher at Inria, France.  DavidByers and Eric Young independently broke the same key, just 2hrsearlier.The Cypherpunks Key Cracking RingThe home page is :Cypherpunks Key Cracking RingDamien Doligez announced firstThe first announcement was by Damien Doligez, here is his pagecontaining his announce and press release.  This breakage attracted alot of press.  Damien has some of the press reports are available online:Breaking Hals challengeDavid Byers and Eric YoungThere was an independent breakage of the same key.  David Byers andEric Young worked on half of the key space each.  This challengehappened 2hrs earlier to Damiens.  The announce was later.Announce below.If you have any questions about the second (first? it was nearly thesame time and who's counting with a bit of free idle computetime). breakage contact me this email address:From: aba@dcs.ex.ac.ukDate: Thu, 17 Aug 95 16:10:00 +0100To: cypherpunks@com.toadCc: davby@se.liu.ida, Damien.Doligez@fr.inria, hfinney@com.portal.shell,        asb@uk.co.nexor, abaSubject: Another SSL breakage...-----BEGIN PGP SIGNED MESSAGE-----All hell seems to have broken loose whilst I was lazing on the beachyesterday.  SSL breakings, big name newspaper newsreports (of varyingdegrees of accuracy), and much ITAR bashing (yay!) or perhaps thatshould be nooooh! 'cos I might be doing myself out of work as a UKcrypto hacker (as John Hemming said in the article Robert Hettingaforwarded) if we loose the fun advantage of being in the free world,and not having to follow the ITAR nonsense.Anyway, congratulations Damien!As Hal said, another group was working on the SSL challenge (albietjust for software testing purposes).  Here's the story....on Tue, 15 Aug 1995 10:43:15 +0200 I recieved this from David Byers:> Eureka!>  > Encrypted Master Key: 7ef0961fa6>  > [...]So who was first?  David hit it Tue 10:43 GMT+2.Doesn't matter, the more the merrier, and the better to demonstratethe silly ITAR export restrictions.This was a trial run at breaking it which two people had done just tocheck if their respective software was working correctly.  It appearsthat it was :-).  This testing was some of the reason for the slownessin getting the group effort started, we were very keen to ensure itreally would work, and that the software was working perfectly.Disappointment with the RC4 bruting demonstrated the importance ofchecking first.  On with the story,Davids eureka arrived Tuesday, I tinkered with it some, but wasinterpreting it wrongly and left it for that day, then I was awayyesterday (at the beach with wife and kids, nice weather over here),and figured out how to apply the key this morning (with a bit ofprompting from Hal as to what I was doing wrong), just after readingDamien's announce on cpunks, where he independently bruted it on afarm of workstations.Here's the output, with the "Mr Cosmic Kumquat" from "SSL Trusters Inc":> PPOST /order2.cgi HTTP/1.0Referer: https://order.netscape.com/order2.cgi> User-Agent: Mozilla/1.1N (Macintosh; I; PPC)> Accept: */*> Accept: image/gif> Accept: image/x-xbitmap> Accept: image/jpeg> Content-type: application/x-www-form-urlencoded> Content-length: 472> > source-form=order2-cust.html&order_number=31770&prod_80-01020-00_Mac=1&carrier_code=UM&ship_first=Cosmic&ship_last=Kumquat&ship_org=SSL+Trusters+Inc.&ship_addr1=1234+Squeamish+Ossifrage+Road&ship_addr2=&ship_city=Anywhere&ship_state=NY&ship_zip=12345&sh(I won't bother formating it more cleanly as Damien has already donethe honors).I think a group effort ought to be done now that we are confident ofthe software, just to see how darn fast we (cypherpunks as a group)can knock off SSL keys.  (This one was done by 2 people for testingpurposes, and independently by Damien (who we didn't know was workingon it)).  I'd really like to work up to a really meanly few hoursbreakage, as it looks that much more impresive.  The next mediarelease ought to be of a steady offer, of the form, cpunks break keysin x hours, where x is a very small number.  And not just break onekey, but will break lots of keys, as required, until something is doneabout it (ITAR) :-)Eric Young is currently away on holiday, but I have his machine statsfrom earlier email, where he explained the hardware he was testing on.Eric swept 8000 - FFFF, and David 0000 - 7ef0 (where he hit the key)Machine stats for this bruting:1 x 16k processor MasPar MP-1 - 1.5M keys/sec4 CPUs of R4400 200mhz      - 24000 keys/sec4 CPUs of sparc  60mhz      - 17500 keys/sec2 CPUs of sparc  50mhz        - 14800 keys/sec1 CPU of Pentium 75mhz      - 10200 keys/sec1 CPU of Alpha      - 10000 keys/sec2 CPUs of 88100      -  8000 keys/sec1 CPU of 88000      -  3500 keys/sec1 CPU of R3000 36mhz      -  3800 keys/sec49 CPUs of 486DX 50mhz      -  3780 per srcThe workstations total: - 424,320 keys/sec, and the Maspar 1.5M keys/secon it's own.The 0000 - 8000 sweep was finished Aug 11 (he might have finished aday or two earlier, that's when he replied to my question as to how hewas getting on.  He left for his holiday after that email.The MasPar sweepings were going fast, swept 0000 - 795d (this wassometime before the 11th Aug) but someone else wanted the machine, soa pause ... and then (presumably Tues morning) 795d - 7ef0 and bang hehit it.We were getting worried about the possibility of software failure bythen as we'd already swept 8000 - FFFF and 0000 - 795D accounting for97.4% of the key space.It was hiding away in the last bit of unswept keyspace.  Luck of thedraw...A few quick calculations:The maspar alone could do the entire keyspace in 8 1/2 days, or anexpected average time of ~100 hours.  I believe I'm right that therewould be lots of organisations which would sell you idle maspar hoursfor a lot less than $100 / hr.Heck you could do it with PC's, if they (WSJ article) think it's worth$10k all I can say is "give me the $10k", and I'll do it and make ahandsome profit.The workstation farm, at 424k keys/sec could do the job in 30 days, or15 days average.  The workstation farm was only used to sweep half thekey space, and was used overnight (12 hours) and weekends (61 hours)only as people were using the machines during the day.Could it have been done with out anyone knowing?  Hell, yes - it wasin fact, no announce was made as it was just testing etc.Adam- --HAVE *YOU* EXPORTED RSA TODAY? --> http://www.cypherspace.org/~adam/rsa/- --rsa--------------------------8Comments, html bugs to me (Adam Back) at
NSA's keysCryptonym found that there was a 2nd CAPI key in Microsoft's CAPI code, andthat in NT SP4 they had forgotten to strip the symbols, and the symbol onthe send key was _NSAKEY.  Since then speculation has been that the key isthe NSA's key to either allow them to insert trojaned crypto modules forinfo war purposes, or (less parnoidly) that they want to be able to usetheir own modules.  Microsoft's cover story is that it was just a badlychosen variable name, and was actually just a backup key in case somethinghappened to the private key for the first one.Anyway since we now have a key which is suspected to be the NSA's publickey, the obvious thing to do is format it as a PGP key, so that anyone whowants to indulge in voluntary key escrow can Cc their PGP encrypted messagesto the NSA.(Thanks to anonymous for the hex data.)Type Bits/KeyID    Date       User IDpub  1024/51682D1F 1999/09/06 NSA's Microsoft CAPI key -----BEGIN PGP PUBLIC KEY BLOCK-----Version: 2.6.3imQCPAzfTdH0AAAEEALqOFf7jzRYPtHz5PitNhCYVryPwZZJk2B7cNaJ9OqRQiQoie1YdpAH/OQh3HSQ/butPnjUZdukPB/0izQmczXHoW5f1Q5rbFy0y1xy2bCbFsYij4ReQ7QHrMb8nvGZ7OW/YKDCX2LOGnMdRGjSW6CmjK7rW0veqfoypgF1RaC0fABEBAAG0LU5TQSdzIE1pY3Jvc29mdCBDQVBJIGtleSA8cG9zdG1hc3RlckBuc2EuZ292PokBFQMFEDfTdJE+e8qoKLJFUQEBHnsH/ihUe7oq6DhU1dJjvXWcYw6p1iW+0euRYfZjwpzPotQ8m5rC7FrJDUbgqQjoFDr++zN9kD9bjNPVUx/ZjCvSFTNu/5X1qn1rit7IHU/6Aem1h4Bs6KE5MPpjKRxRkqQjbW4f0cgXg6+LV+V9cNMylZHRef3PZCQa5DOI5crQ0IWyjQCt9br07BL9C3X5WHNNRsRIr9WiVfPK8eyxhNYl/NiH2GzXYbNeUWjaS2KuJNVvozjxGymcnNTwJltZK4RLZxo05FW2InJbtEfMc+m823vVltm9l/f+n2iYBAaDs6I/0v2AcVKNy19Cjncc3wQZkaiIYqfPZL19kT8vDNGi9uE==PhHT-----END PGP PUBLIC KEY BLOCK-----Microsoft's CAPI keyAnd while we're at it as Microsoft's key is there too, here is theirkey in case anyone wants to send microsoft any encrypted messages.Type Bits/KeyID    Date       User IDpub  1024/346B5095 1999/09/06 Microsoft's CAPI key -----BEGIN PGP PUBLIC KEY BLOCK-----Version: 2.6.3imQCPAzfTc8YAAAEEALJz4nepw3XHC7dJPlKws2li6XZiatYJujG+asysEvHz2mwY2WlRggxFfHtMSJO9FJ3ieaOfbskm01RNs0kfoumvG/gmCzsPut1py9d7KAEpJXEbF8C4d+r32p0C3V+FcoVOXJDpsQz7rq+Lj+HfUEe8GIKaUxSZu/SegCE0a1CVABEBAAG0L01pY3Jvc29mdCdzIENBUEkga2V5IDxwb3N0bWFzdGVyQG1pY3Jvc29mdC5jb20+iQEVAwUQN9Nz5j57yqgoskVRAQFr/gf8DGm1hAxWBmx/0bl4m0metM+IM39JyI5mub0ie1HRLExP7lVJezBTyRryV3tDv6U3OIP+KZDthdXb0fmGU5z+wHt34Uzuxl6Q7m7oB76SKfNaWgosZxqkE5YQrXXGsn3oVZhV6yBALekWtsdVaSmG8+IJNx+nNvMTYRUz+MdrRFcEFDhFntblI8NlQenlX6CcnnfOkdR7ZKyPbVoSXW/Z6q7U9REJTSjBT0swYbHX+3EVt8n2nwxWb2ouNmnm9H2gYfXHikhXrwtjK2aG/3J7k6EVxS+mRp+crFOB32sTO1ib2sr7GY7CZUwOpDqRxo8KmQZyhaZqz1x6myurXyw3Tg===ms8C-----END PGP PUBLIC KEY BLOCK-----Comments, html bugs to me (AdamBack) at 
Commercial Data RecoveryThis document describes a mechanism, Commercial Data Recovery(CDR), to allow companies to recover stored encrypted information aspart of a disaster recovery plan.  The security, ergonomics, and political risks of CDR are compared with PGP Inc's CommercialMessage Recovery (CMR) system.IntroductionThis document is centered around the OpenPGP standard, and thereforeexplores first what is possible within the existing standard.  Severalof the CDR variants presented can be achieved entirely within thepgp5.0 standard without adding any new functionality.Commercial disaster recovery requirementPGP is commonly used for two purposes: file encryption, and encryptionof email communications.  The situation arises in a commercial settingthat individuals are protecting information which the company wouldlike to be able to recover in the event of disaster: in the event ofthe user forgetting his passphrase, or in the event of the unexpecteddeath of the employee.  Stored files which the company may require theability to recover include encrypted files stored in the files system,on backup tapes, or on floppy disks; and encrypted sent and recievedemails stored in mail client folders.Security vs AvailabilityThere is a security risk in adding data recovery mechanisms: theadditional risk that recovery procedure is used by other than theowners of the data to recover plaintext.A central goal of the CDR design described in this document is tominimise this security risk.  Keys used to encrypt email which istransmitted over the Internet are more valuable to an attacker thankeys used to encrypt stored files because of the relative ease withwhich an attacker can obtain copies of emailed ciphertext.  Storedencrypted files in contrast are protected by all the physical securitysystems the company is relying on to protect it's paper files,plaintext data stored on disks, and backup tapes.For this reason the CDR approach treats communications keys as moresensitive than keys used to encrypt locally stored information.Separate Signature and Encryption Keys added in pgp5.0This section describes a feature added to PGP with the pgp5.0 release:separate signature and encryption keys.  Readers familiar with pgp5.0functionality may like to skip this section.pgp2.x RSA keyspgp2.x (and pgp1.x) only had direct support for one type of publickey: the RSA public key.  RSA public keys were used both as signaturekeys, and as encryption keys to transfer session keys.  The ability togenerate RSA keys, and to interoperate with pgp2.x is retained inpgp5.x.pgp5.x El Gamal (DH) encryption and DSA signature keysOne reason for the introduction of separate key functionalities is theaddition, starting with pgp5.0, of the DSA digital signature algorithmwhich can only function as a signature system.  In addition the ElGamal (EG) public key system which was also added with pgp5.0 is usedonly as a public key encryption system. (There are some El Gamalvariants which can be used to produce digital signatures, but theseare not used in pgp5.0).  (El Gamal is a Diffie-Hellman (DH) variantwhich is sometimes also referred to confusingly as DH.)  TheDSA is itself a DH signature variant.Patent issuesAnother significant reason for the adoption of EG and DSA inparticular is the freedom from patent encumbrances these algorithmsnow enjoy.  RSA by contrast is patented, and unpatented algorithms aregenerally preferred for internet standards.Key expiry feature added in pgp5.0One general security principle is that keys used to protectcommunications should be replaced periodically to reduce the value toan attacker of an individual key.Migration pathThe pgp5.0 standard provides support for this functionality in termsof the ability to attach expiry dates to signature and encryptionkeys.  (In the pgp5.0 and pgp5.5 clients the signature and encryptionkeys are treated as a pair, and are given the same expiry information,but both the pgp5.0 and pgp5.5 clients can already cope withsignature-only keys and encryption-only keys with different expiryinformation.)Web of TrustIn pgp5.0 with the EG public keys, the Web of Trust (WoT) is based onthe signature keys only.  The users signature key is authenticated inthe web of trust.  The user signs his own encryption key therebytransferring trust to it.  This ensures that encryption keys can beexpired and replaced without affecting the web of trust.Limited Perfect Forward SecrecyPerfect Forward Secrecy (PFS) refers the technique of destroying oldcommunications keys to ensure that past traffic can not be compromisedafter the point of re-keying.  One way to use the pgp5.0 key expiryfacilities is to have signature and encryption keys with verydifferent expiry periods.  For example a signature key could be givenno expiry period (the pgp5.0 standard supports expiry periods of`forever'), and encryption keys could be given an expiry period of 6months.To obtain PFS, a more secure way of dealing with expired encryptionkeys is to actually irretrievably delete them.  This then simulatesPFS: an attacker is unable to decrypt traffic encrypted with oldcommunications keys even if he is able to coerce co-operation from therecipient.  No one can be coerced because the key has been deleted.It seems reasonable that some users may want to use key expiry forthis purpose, and this does not require any modifications to theexisting pgp5.0 standard.Key expiry problems for stored encrypted dataOne problem introduced by key expiry is that any stored data encryptedto the expired key becomes less available.  For security reasons theexpired key should ideally be deleted, and in this case access to thedata is lost.  Alternatives are to attempt to store the old keys moresecurely, this then presents the problem that some stored data isharder to access than other data, and presents additional keymanagement problems for old keys which will be confusing for users.Re-encrypting after key expiryOne method to solve this problem is to re-encrypt all of the encryptedfiles at the point of re-keying.  However this method hasdisadvantages in that not all of the encrypted data may be easilyavailable.  Some of the encrypted data may be on backup tapes, onfloppy disks, or stored inside `zip' or `tar' archives on the disk andhence may be missed.Separate storage keysThe simplest solution to this problem seems to be to encrypt to aseparate storage key.  Within the pgp5.0 standard this storage keywould be a separate El Gamal key with a long expiry date.  With thissystem we then have three types of keys: signature-only keys,communications-only keys and storage-only keys.  This could requireminimal or even no modifications to the pgp5.0 standard, storage andencryption keys could be differentiated between by:    location storage-only key is stored in (for example a separate keyring)      application being configured to use a chosen encryption key as    the storage-only key by giving a keyID      convention on expiry dates (expiry date `forever' could be storage key,     other values could be communications keys)      extra flag to indicate a storage-only keyOnce the separation of key types is made, the security benefits ofre-keying can be more fully obtained.Sent and recieved email foldersTo maintain availability after re-keying of encrypted sent andreceived emails archived in mail folders, the email plaintext would beencrypted with the storage-only key.  This then means that dataavailability for encrypted files on disk, floppy disk, and backup tapeis maintained; and that availability for archived sent and receivedemails is maintained.Storage RecoveryIf the system is being used in a commercial setting, disaster recoverycan be provided by storing recovery information to allow recovery ofthe storage-only key.  There is still some additional danger over thecase where there is no recovery procedure: the risk that an attackermay be able to compromise the recovery information.  However becausethe encrypted data is all protected by the companies existing physicalsecurity mechanisms the security risk is minimised.Another form of storage recovery would be to include recoveryinformation with each file, and this would be a valid combinationachieved by placing CMR-style requests for additionalcrypto-recipients on the CDR storage-only key.  However this practicemakes recovery from forgotten passphrase more problematic: to restoreuser access to the data after forgotten passphrase, the recovery agentwould have to decrypt all stored files (be they on hard disk, backuptape, floppy disk, or stored inside `zip' or other archives), then theuser would have to generate a new storage-only key, and re-encrypt allof the files.  Given the frequency with which users are prone toforgetting passphrases implementors may decide to avoid this optionfor ergonomics reasons.CDR vs CMRPGP Inc has an alternative data recovery proposal calledCommercial Message Recovery (CMR).  The CMR proposal involvessending recovery information with the message in the form of a secondcrypto recipient.  In addition mechanisms are provided in the form ofa proposed CMR public key extension to the IETF OpenPGP standard whichindicates a request to the sender to include this recoveryinformation.  In addition facilities are provided in the form of PGPInc's SMTP policy enforcer to partially enforce the inclusion of thisrecovery information by bouncing mail which does not include it.Security comparisonPGP Inc's CMR proposal makes re-keying problematic because data isarchived in email folders still encrypted to the encryption key.  Thistends to encourage the practice of having very long term communicationencryption keys.  Indeed the beta pgp5.0 implementation the authortried makes the recommendation that most users would give keys anexpiry period of `forever'.In addition a security risk with the CMR proposal is that an attackeris able to obtain via coercion, bribery or burglary the CMR key usedto encrypt the traffic for this key.  With a purloined CMR recoverykey, and given the long life time encouraged for such keys thepreviously passive attacker may be able to recover years worth of oldtraffic.Another risk is that companies may for simplicity have only one CMRkey, thereby putting at risk the entire companies securedcommunications over periods of years.  This is naturally a badpractice, and one which is discouraged by PGP Inc also, but the authorremains cynically confident that some corporate users will ignore suchadvice.Privacy ComparisonPGP Inc proposese the CMR communications recovery mechanism as aprivacy respecting method of achieving data recovery.  The privacyfeatures of the CMR proposal are that there are proposed flags whichare attached to a public key to indicate statement of intent aboutplaintext handling to the sender who is about to use the public key.Three statements of intent are possible with the current CMR proposal:    personal key (no flags set)      company use key, company may read message, please encrypt to    listed company CMR recovery key(s) (recovery flag set)      company may read message, encrypt to listed CMR recovery key(s) or    the message will be bounced (strict recovery flag set)PGP Inc's statement of intent in plaintext handling is a usefulconcept, in that it explains explicitly to the sender who will be ableto read the message, and how the plaintext will be handled.  Statementof intents are always advisory, in that they are impossible toenforce; however they are useful in encouraging ethical behaviour inthis regard.Statement of intent messages are independent of recovery mechanism,and apply equally to the CDR mechanism described in this document.  Infact the author would like to encourage a fuller set of statement ofintent flags for both sender and recipient, allowing keys to be markedwith intents:    personal key, messages not archived      personal key, messages archived      key used for company business, messages not archived      key used for company business, messages archived      key used for company business, messages archived and recoverableAnd, in addition a similar privacy argument could be made to allow thesender to express his preferences with regard to plaintext handling ona per message basis.  This could generalise the -m function of pgp2.xwhich instructs the recipient not to save to a file.  (The -m flag isthe sort of electronic version of `please burn this document afterreading', this flag is mildly enforced by the pgp2.x command lineapplication).  These set of flags would allow a sender to send a`normal communication message', or a `official statement, pleasearchive with recovery if available', or `sensitive do not archive' andso on.  A privacy respecting implementation could provide support forthese functionalities.  Whilst obviously easy to over-ride, this isfelt to be a useful exercise in encouraging respect for privacy.In addition the recipient should have ability where company policyallows to choose which messages to archive, and which to archive withcompany recovery information.From a privacy perspective the CDR and CMR proposals are approximatelyequivalent; the statement of intent flags, and the social value ofencouraging companies to respect privacy are useful in both.Government access to communication key politics Another aspect of the whole data recovery area is that the USgovernment, French government, and UK government (as well as othergovernments) have expressed an unhealthy interest in obtaining privateindividuals, and companies communications keys.  Many privacyadvocates view this development with fear, as it seems to many aparticularly Orwellian development.  Usually the Government Access toCommunication Key (GACK) attempts try to deflect criticism byfocussing on unrelated issues as a vehicle to introducing GACK:    Terrorist attacks and requirement for emergency government access    to communications traffic      Government assistance for companies to recover stored plaintext    via key escrow infrastructure.      Assisting electronic commerce by helping put in place    Certification Authorities and digital signature lawsHowever readers who have followed GACK politics will recognise theabove for what they are: attempts to put in place GACK via indirectroutes (respectively: the four horsemen of the infocalypse argument(the fallacy that terrorists will obey laws and use encryption systemswhich have government backdoors), the Clipper I, II and III attemps(various attempts by the US government to bribe and bully companiesinto building a GACK architecture), and the UK TTP (Trusted ThirdParty) proposal where `TTPs' are a euphamism for a CertificationAuthority (CA) which has been coerced by law to keep individualsprivate keys).Scenarios governments might shortly try this to request master keysfor communications might be France, where the government is changingfrom a position of no encryption software without license, to aposition of unlicensed encryption software being allowed provided thatthe governments has a back door into the communications.  Otherexamples being perhaps the UK (with it's highly controversial TTPlicensing proposals), or the US with the administration and lawenforcement community pushing hard for access to communications keys.It is likely, particularly in the UK, and US in the authors opinion,that government backdoors would be demanded in carefully orchestratedstages, designed to minimise public opposition.  There might be trialswhere the traditionally more regulated financial organisations wererequired to comply, next perhaps government funded research labs, andbusiness organisations accustomed to large amounts of governmentregulationOnly towards the end would people using government funded networks(academics), Internet services providers (ISPs) and individuals beregulated.  The final phases may use a terrorist activity, or nationalemergency, or other scandal as justification for increasing therequirements.  It is likely also that the justification will be interms of wholesome sounding public safety safeguards.Political ComparisonPGP Inc's CMR proposal loses heavily in the political argument in theauthor's opinion because the protocol design supports the practice ofallowing third and fourth party access to communications traffic.Particularly with the multiple CMR key requests per key which arerumored to be coming in the next version of PGP, it will be easytechnically for a government to request that one of the recovery keysbelong to the government.  Governments already have the political willto have access to communications; the barriers are technical, andindividual's resistance to the notion.  The danger with the CMRproposal is that it could become the enabling technology for pushbutton suveillance, the enabling technology for wide scale secretservice signals intelligence keyword scanning.  This probably not whatit's proposers intend, however the danger is there in building thetechnology.The CDR proposal on the other hand focusses on recovery information ofstored information only, and as a design principle avoids sendingrecovery information over open networks.  Whislt governments may beinterested to obtain storage keys, they have much less value, becausethe ciphertext is much harder to obtain.  Also non-compliance is muchharder to detect: a government law enforcement agency would not knowif an individual was actually using storage software with governmentbackdoor key access without physically obtaining the storage media.For most individuals the point at which governments executes adawn raid is a point at which the individual is already introuble.  The CDR proposal is much closer to the status quo inpolitical terms.Comments, html bugs to me (Adam Back) at
RC4-40 attemptOutcome of 40 bit RC4 sweep - failureThe full 40 bits of key space were swept.Here's a copy of the announce of completion, andhall of fame for contributers.But, unfortunately nothing was found, though there a couple of reasonsfor this:We weren't 100 percent sure that Dan Bailey's supplied ciphertext / plaintextpair really were correct. This was because there are no openly availabledetailed specs for Microsoft Access. We were essentially guessing thatthis was straight RC4-40 with no headers or other additional changes.Eeek! There was a bug in the bruterc4.c program which meant that verifiablykeyspace was not being swept on Dec Alphas when the -v option was used.Some people's browsers / windowing systems seem to add spaces to uuencodedfiles. At least two people were able to demonstrate that this resultedin incorrect ciphertext / plaintext!So maybe a failure in one sense, but still we did come up with the computeto sweep 40 bits in around 1 weeks of real time. The keys were gettingswept a lot faster towards the end as more people joined in, and as thejackpot kept getting rolled over so to speak.However, it is useful from a learning point of view, several mistakeswhich were made with were fixed for the SSL breaks.Also useful from a demonstrational point of view we really did sweepthat much keyspace, and if we had correct plaintext/ciphertext andthere were no bugs in the program (only affected Alpha's we think - possiblyother BSD, and only if -v option was used) we would really have done it.So we demonstrated that compute to break 40 bit RC4 is easily available. Comments, html bugs to me (AdamBack) at 
credlib - Credential Librarycredlib is a credential library providing a simple interface to Brandscredentials (by Dr Stefan Brands), andalso Chaumian credentials (by Dr DavidChaum).  The library is based on openSSL.The library code and binaries can be found here.I have included linux and windows binaries in the .tgz and .zip respectivelyfor convenience.  If you use the -p option, the program prints bc formatoperations and numbers so you can check things and follow along using the bcinterpreter.  You will need a bc modular arithmetic library such as this one by Anton Stiglic to do that.credlib so far implements just the basic Brand credential features: issuing,showing with 0 to many attributes.Note: Brands credentials are patented, and those patents are now ownedby microsoft, however see below for the open specification promise frommicrosoft that grants some rights to use the patents.In Mar 2008, microsoft acquired Stefan Brands credential patentsAt the RSA conference in Mar 2010, microsoft announced the release of uprove a C#and java library implementing Brands private credentials plus formats andspecifications under the microsoft OpenSpecification Promise which I think means you can now use at least partsof Brands patent suite, provided you conform to the interop guidelines setforth.  And the guidelines are very reasonable for the basic protocol beingsomething akin to DSA level of specification.credlib is implemented by Dr Adam Back.Other resourcescredentica has an online copy of Dr Stefan Brands PhD thesis on hiscredential system Rethinking PublicKey Infrastructures and Digital Certificates; Building in Privacy, MITPress, 2000, Dr Stefan Brandsa document I found useful while implementing the above library is thispaper A Technical Overview of DigitalCredentials, Technical Report, February 2002, Dr StefanBrands.another technical summary paper ADescription of Protocols for Private Credentials, Zero-KnowledgeSystems Inc, Technical Report, June 2001, Ariel Glenn, Dr Ian Goldberg,Frederic Legare, Anton StiglicStefans company credentica.comhas a java library called U-prove that implementsmore of the features of Brands credentials than my credlib library.Comments, html bugs to  (Adam Back) at 
To: cypherpunks@toad.comSubject: [ANNOUNCE] hash cash postage implementationFrom: Adam Back Date: Fri, 28 Mar 1997 16:52:26 GMTSender: owner-cypherpunks@toad.comA partial hash collision based postage schemeI've been talking about a partial hash collision based postage schemeon the crypto lists for the last few days. The idea of using partialhashes is that they can be made arbitrarily expensive to compute (bychoosing the desired number of bits of collision), and yet can beverified instantly.A first cut implementation of these ideas can be fetched from here:   * hashcash.tgz   * PGP signature of hashcash.tgzI will describe what the implementation allows by example, using the programso you can follow along if you wish.There is an integrated partial hash collision generator (hashcash mint) andremailer plug-in. The remailer plug-in should be easy to hook into typeIremailers. typeII or nymserver would require modifying the mixmasterclient/remailer, the code has been designed to make this relatively easy todo, and link directly into mixmaster, or alpha or newnym.Compiling        % gcc -O6 -c *.c        % gcc -o hashcash hashcash.o sha1.o        % gcc -o sha1 sha1file.o sha1.o        % gcc -o sha1test sha1test.o sha1.o        %The functions provided by the program areRun with no arguments and it prints a list of flags and terse usageinstructions.Speed test:        % hashcash -t        speed: 7218 hashes per sec        %This tells you the number of hashes it can search per second. (Note, theimplementation of sha1 it is using is not optimised, it is my referenceimplementation. I have another speed freak sha1 implementation which needs1/2 hrs work, and has the same interface, so I'll plug it in later. It'scommented in sha1.c).Estimate time required to find 17-bit partial hash collision:        % hashcash -t -17        speed: 7274 hashes per sec        find: 17 bit partial sha1 collision        estimate: 9 seconds        %(varies quite widely from estimated time)Calculate a 17 bit collision on string "flame"(flame is a now dead remailer):        % hashcash -17 flame        speed: 7274 hashes per sec        find: 17 bit partial sha1 collision        collision: 09948flame356018443        tries: 57450        %The collision is actually found on the hash of the date since Jan 1 1970 indays (5 digit leading zero filled) and string given.So the collision is found on:        % echo -n 09948flame | sha1        fbbea210abafe3e72afe7849eaea2052e309e017        %The collision that was found can be seen manually as the collision isconstrained to be the MSbits of the digest:        % echo -n 09948flame356018443 | sha1        fbbead76da651cf856f7466fed9624d3ada061d9        %You can manually see that the first 20 bits match. (Note we asked for a 17bit hash, but it generates a 17 bit or larger hash. We just got lucky andgot an extra 3 bits, which would happen about 1 time in 8).The hashcash client can also report on a collision:        % hashcash flame 09948flame356018443        collision: 20 bits        %You can check on the validity period as compared to todays date:        % hashcash flame 09948flame356018443 28        validity: 28 days remaining        collision: 20 bits        %You can check that a hash has a requested number of bits:        % hashcash -25 flame 09948flame356018443        collision: 20 bits        required: 25 bits        rejected: too few bits        %The exit status is set to failure if any of the tests fail: ie if there aretoo few bits, or if you do a validity check and the hash has expired, orisn't yet in it's validity period.Double spending protectionYou can also ask the hashcash client to remember collisions within aselected validity period.        % hashcash -d -25 flame 09948flame356018443 28        validity: 28 days remaining        collision: 20 bits        required: 20 bits        database: not double spent        adding: 28 09948flame356018443        %The collision will only be added if all the tests pass (in validity period,required number of bits). The exit status also tells you if the hash was ok.The database would grow indefinately as the mailer accepted new payments, sothe validity period is stored in the database, and at the next use of thedatabase after the validity period expires, the collision will be discarded.There is no need to keep expired collisions around because we wouldn'taccetp it anyway because it's out of date, so who cares if we've previouslyaccepted it. A validity period of 0 means valid forever, and it will neverbe discarded from the database.An example of double spendingA new test now is whether a hash has been presented before, so we the abovecommand and expect it to be rejected as already spent, because it is in thedatabase:        % hashcash -d -25 flame 09948flame356018443 28        validity: 28 days remaining        collision: 20 bits        required: 25 bits        rejected: too few bits        database: double spent        %(exit status is set to failure, due to double spent cash)That's itIt's very lightly tested, so if anything breaks let me know.It's got some inefficiencies in places, but working code comes first,efficiency later.(Also I have not tested my SHA1 implementation on a big endian machine, itauto-detects byte endian-ness, theoretically).Remailer applications discussed so far   * exit remailer postage per post   * spam filter on mail you receive, if it hasn't got a 20 bit hash, or 1c     digicash you have a program which bounces it with a notice explaining     the required postage, and where to obtain software from. This would put     spammers out of business overnight, as 1,000,000 x 20 = 100 MIP years     which is going to be more compute than they've got, and 1,000,000 x 1c     = $10,000 is going to be more than they are likely to make through     sales interest from the spam.   * good behaviour bond for nymserver users. The nymserver user pays the     nymserver (in a largish hash collision, or $25 digicash) for a     replyable nymserver account. They agree an contract with the penalty     clause that breaking the contract means the nymserver keeps the     digicash/collision, and disables the account. They user's identity     isn't known, but to join in again they have to pay up another large     hash collision or more digicash.   * there are lots of other ideas to play with.How does this fit in with digicashDigicash postage on remailers, and mail would be useful, however there are anumber of problems with digicash:   * It is more onerous to set up an account (form filling etc)   * Not many people have accounts   * It's only anonymous for the payer anonymous (and not anonymous for the     seller)So my suggestion is that we have remailers which accept either hashcollision postage, or digicash postage. The advantages of this approach are:   * Hashcash may provide a stop gap measure until digicash becomes more     widely used   * Hashcash is free, all you've got to do is burn some cycles on your PC.     It is in keeping with net culture of free discourse, where the     financially challenged can duke it out with millionaires, retired     government officials, etc on equal terms.   * Hashcash may provide us with a fall back method for controling spam if     digicash goes sour (gets outlawed or required to escrow user     identities).Any comments, code, etc gratefully received.  A couple of remailersalpha testing it would be nice also.Adam
GAK (Key escrow) politicsZergo report forNHSnet recommending GCHQ's sikrit Red Pike algorithm to the NHS.UK Export ControlsFor information purposes follows information on UK export controls onencryption software.Wassenaar ArrangementThe Wassenaar Arrangement replaces the COCOM regulations. The 28 membercountries of the Wassenaar Arrangement are: Australia, Austria, Belgium,Canada, the Czech Republic, Denmark, Finland, France, Germany, Greece,Hungary, Ireland, Italy, Japan, Luxembourg, the Netherlands, New Zealand,Norway, Poland, Portugal, the Russian Federation, the Slovak Republic,Spain, Sweden, Switzerland, Turkey, the United Kingdom and the United States.Some texts on the Wassenaar Arrangement:Press release13-Dec-1996.Initial documentWassenaar descriptionDTIDTI white paperwhich includes amongst other things a threat to legislate to makeintangible export subject to licensing.(That means no more posting crypto code on the WWW, and would be amassive blow to UK crypt industry, showing once again that the DTI(Department for Trade and Industry) is more interested in furtheringsignals intelligence special interests rather than the Industry it issupposed to be representing.  (ie In my view, the DTI's currentbehaviour over export issues indicates it does little more than act asa mouthpiece for the publicity shy GCHQ signals intelligence people).Notice of ExportLicensing ProceduresDTI's Export Control Organization Enquiry Unit phone number is 0171 2158070Mike Cobb recently posted to the mailing list a copy of a letter he had received from the DTI in responseto his attempts to obtain permission to export a crypto product. Text ofthe DTI letter.COCOMThe COCOM regulations have been replaced by the Wassenaar Arrangement.Other resourcesBert-Jaap Koops cryptolaw surveyComments, html bugs to me (Adam Back) at
Cypherpunks postersBack in Nov 1999 I grepped and sorted my archives and made a list of posters by number of posts up to that date.  It's available here.  (For people who's email addresseschanged where it was obviously the same person, I merged them under the title of the last email address at that time.)How to subscribe to the (unmoderated) Cypherpunks mailing listSend mail to majordomo@lne.com with this the phrase "subscribe cypherpunks" on the firstnon-blank line of your message.  You can also subscribeto majordomo@algebra.com to majordomo@cyberpass.netA mail-bot will reply.  If anything goes wrong the mail-bot willmail you a help message. To post a message to the list just send mail to:or cypherpunks@lne.comcypherpunks@algebra.comcypherpunks@cyberpass.netwhich ever address you use it will be forwarded to all of the listsubscribers.  The lists form a single distributed list.There are a few other lists which are the same also, plus there'sJim Choate's -- but his floods of URLs from newsites and otherstupid antics is one of the main reasons for the existance of themoderated list.Cypherpunks on the WEBAlternatively there is an automatically HTMLized version ofcypherpunks at:http://www.inet-one.com/cypherpunks/and an archive of each of the above lists at:http://www.mail-archive.com/cypherpunks@lne.com/ andhttp://www.mail-archive.com/cypherpunks@minder.net/, andhttp://www.mail-archive.com/cypherpunks@algebra.com/ andhttp://www.mail-archive.com/cypherpunks@cyberpass.net/Comments, html bugs to  (Adam Back) at
Advertised open access eternity servers  http://eternity.vipul.net/SoftwareThe eternity server can be downloaded from here.  We've moved on a few versions now.  Beta testers required.  Bug reportsappreciated.Aug 14 02:54 GMT[eternity-0.10.tgz] and [sig] Aug 09 17:07 GMT[eternity-0.09.tgz] and [sig]Key [key] sigs are made with.There is more detailed documentation included in the tar file.Submitting documents to EternityHere is a howto for submitting documents toeternity.  There is some more information on submitting documents alsoin the Phrack article.PaperRead the Announce to the cypherpunks listfor description of the eternity server.  There was an article in Phrack 51 on eternity.  The phrack web site is here.Related workRoss Anderson wrotea paper on cryptographic techniques for creating a distributeddocument store which is hard to censor.  The paper is called theThe Eternity Service.The &QUOT;Eternity Service&QUOT; that I have implemented falls farshort of Ross's design, but it is far easier to implement than Ross'sdesign.  I stole his name, &QUOT;Eternity Service&QUOT; which is wherethe name comes from.  The eternity servers and the above code and documentation arepresented for criticism.  The hope is to stimulate interest, and togain useful experience leading to more secure and more resilienteternity servers.Dave Wagner and Ian Goldberg have two services calledTAZ and Rewebber serverswhich together go to create a document store designed to acheive the sameaims as eternity servers.  The rewebber is a kind of chaining encrypting webproxy.  The TAZ server provides a persistent URN (URL) to find the documentby providing a level of redirection.  If the rewebber chain gets broken, orthe document tracked down and removed, the TAZ server can point to it's newlocation.  Service is then restored.Another eternityproject.Comments, html bugs to me (Adam Back) at
PGP StealthA PGP 2.x tool for steganographyStealth is a tool which takes a PGP 2.x encrypted message, andstrips any standard headers off to ensure that the result looks likerandom noise, and if the PGP random number generators are secure, andif IDEA, and RSA (RSA when normalised) produce good quality randomnumbers, the result should look like white noise, and stand up toananlysis as being indistinguishable as white noise.You would probably not normally use stealth directly, but use itconconjuction with a steganographic appliciation. Or it if you arewriting a steganographic application. Stealth could also be used toproduce random numbers (just uuencode the output and email it), if youare happy with your only plausible deniability being: "it was theoutput from my random number generator for Fred to analyse".Stealth 1.0, 1.1, 1.2, (and an unreleased 1.3) were written by HenryHastur  (ie if you want to send email to Henrywrite a message for his attention in the USENET groupalt.security.pgp). Henry Hastur is a nym.Stealth 2.0 is Henry's version 1.1 modified to incorporate animprovement in the randomness of the RSA header part of the PGPencrypted message.  The improvement (discussed by Hal Finney normalising RSA key exchange blocksallows a reversible transformation of the RSA block which producesa rectangular distribution for the data, which covers the fullrange. Bodo Moeller also discussed the problem in sci.crypt, and helped formulate thefinal algorithm used.Stealth versions 1.x while the output looked random to casualinspection, suffered from a weakness with RSA encrypted PGPmessages. A knowledgeable opponent with a few samples of stealthoutput would have been able to tell that the stealth output wasoriginally started with an RSA header with a high degree ofcertainty. That could be disastrous, as the whole point of usingstealth and steganography is to avoid the detection of a hidden datastream, and to use some other larger, noisy data stream to provideplausible deniability.The technical reason for this leak of information is that the RSAheader (see the pgformat.txt file which comes with the PGPdistribution for details) is by definition less than the RSAmodulus. This continues to be the case after stealthing by stealth1.x, and a few sample messages would lead to the increasinglyimplausible (from a deniability point of view) situation of randomdata always being less than a particular point (the RSA modulus ofyour public key).Stealth 2.0 fixes this problem. I am not over confident about therandom number generation in stealth 2.01b (beta) so don't bet anythingserious on it yet.Sourcesourceyou need to compile it, no binary includedComments, html bugs to me (AdamBack) at
Non-Interactive Forward SecrecyA Non-Interactive Forward-Secret Cryptosystem (NIFS) has a single public keywhich a sequence of public keys can be derived from.  There is acorresponding sequence of private keys which can be deleted after use.  Touse one would make each public key valid for a time interval and delete theprivate key after that time interval has expired.  It must not be possibleto compute previous private keys from current ones. NIFS Cryptosystems and Identity-based CryptosystemsIt is possible to construct NIFS schemes from ID-based schemes, but theconverse is not true.  Here is the generic method to use an ID-basedcryptosystem as an NIFS cryptosystem:Generic ID-based approach -- user acts as his own identity      based CA, and during setup user creates multiple identities      corresponding to day of epoch and their corresponding private keys.       At end of setup user deletes ID-based CA's private keys.  Encryption      proceeds as per the ID-based scheme, user deletes per day private key      at end of day.There are at least two weaker requirements which make NIFS schemespotentially simpler than ID-based schemes.no chosen identities - NIFS cryptosystem public keys do not      need to encode chosen strings (chosen identities); instead you just      have the simpler requirement that the sequence of public keys have a      compact (preferably fixed sized) representation, and that the public      keys be computable efficiently from the base public key  only need forward chained security for private keys - with      ID-based cryptosystems the scheme would be considered broken if users      could compute each others private keys; with NIFS the scheme would be      considered broken under weaker constraints: if current and future      private keys can be used to compute past (deleted) private it is      broken, but if past (deleted) private keys can compute future public      keys that is ok, as it is anyway necessary to delete past private      keys.Additional desirable features:setup-free scheme using only forward chained security of private      keys - NIFS cryptosystem based on the generic ID based has a      setup phase after which the ID-based CA private keys are deleted.  It      would be desirable to be able to build a setup-free NIFS      cryptosystem which did not have a setup phase, and instead the      system is designed so that current private keys can generate future      private keys, but private keys can not be used to recover prior      private keys.  This is safe, as private keys are deleted after use.       It is also desirable for two reasons:      more efficient key generation - this will tend to            reduce the cost of NIFS key generation, only the first private            key needs to be chosen at setup time; later private keys can be            computed based on earlier private keys on demand (prior to the            deletion of the private key needed to derive the next key).        unlimited epoch - it is also desirable because there            can be an unlimited number of keys in an epoch, enabling finer            grained validity intervals, and longer lived base public keys            (potentially for-ever as one epoch suffices for a life-time).      forward secure via offline sub-epoch keys - There are      arguments for generating fresh keys representing new epochs      periodically so that forward-security is recovered in event of      undetected private key compromise.  (Recall a compromised current      private key compromises all future private keys).  However this      practice is typically manual and inconvenient, and other steps can be      taken to assure forward-security: if the cryptosystem can be used to      function as a forward secure NIFS cryptosystem.            The framework would be to have a main epoch (possibly of unlimited      length in the case of setup-free NIFS), and a set of sub-epochs with a      offline store of a set of private keys one for each sub-epoch.  When      one transitions from which one sub-epoch to the next, the offline      store must be accessed for the corresponding new sub-epoch private      key.      forward secure with setup NIFS - With an NIFS cryptosystem with a            setup-phase this is easy.  Just store the private keys for a            sub-epoch encrypted with the offline stored sub-epoch key.        forward secure with setup-free NIFS - With a setup-free            NIFS cryptosystem there appears to be no generic mechanism.  The            scheme would have to be modified if possible to require the use            of the sub-epoch key to generate the first private key of the            next sub-epoch.  It may be desirable also for the offline            sub-epoch keys to be in a sequence such that one can compute            them in a sequence like a hash-chain as this is a more compact            representation, and doesn't impose any limit on the number of            sub-epochs that can be used.                  Other applications:delegation - Boneh and Franklin propose to delegate      decryption for a limited time, to copy onto a laptop sufficient      private keys for the planned duration of a trip, if the laptop is      stolen only those seven day's keys are lost.  An NIFS scheme is      sufficient, though they propose it in the context of applications for      ID-based systems.  (What they propose is basically a different      application of NIFS as they already propose that Bob could be his own      ID-based CA for this application.)  offline revocation - Boneh and Franklin propose to have the      ID-based CA issue a private key each day.  To revoke a key the CA need      only stop sending the user further private keys.  The sender does not      need to discover that the user's keys have been revoked via CRLs etc,      the effect is instead that the user will not be able to decrypt the      mail.  This application works with NIFS also, as the identity aspect      is not required.      offline revocation without escrow - One can make such a            scheme where the ID-based CA is not able to read the users mail:            the sender would super-encrypt in addition with a key pair with            a private key generated by the user and the public key certified            by the same ID-based CA.  Traditional worries about ID-based CA            necessarily being able to decrypt mail (so-called escrow like            functionality) are in fact unfounded, one can have offline            revocation while avoiding the escrow problem.NIFS and offline verification without escrow - one            could use two NIFS schemes, one controlled by the revocation CA            for offline revocation, the other by the user for forward            secrecy to have both user controlled forward secrecy and offline            revocation.      NIFS SchemesGeneric NIFS based on ID-based cryptosystemother -- not ID-based?  Chronological NIFS ReferencesChronological list of references to the NIFS problem:6 Sep 1996 - Adam Back - NIFS first       statement of problem17 Apr 1997 - Adam Back - of historical reference value only       broken early scheme and       the break1997 - Ross Anderson - gave talk on Forward Secure       Encryption and Signatures  31 May 1998 - Adam Back - observation that       Identity Based Crypto Schemes can      be used for NIFSSep 2000 - Ross Anderson -            write up of 1997 talk,      [local copy]Identity-Based Crypto Literature1984 - Adi Shamir -      "Identity-based cryptosystems and signature schemes",      Proceedings of Crypto 1984, pp 47-53  Nov 1996 - U M Maurer and Y Yacobi -       "A Non-interactive Public-Key Distribution System",      Designs, Codes and Cryptography vol 9 no. 3 pp 305-316  2000 - Detlef Huhnlein, Michael Jacobson, Jr. and D. Weber -      "Towards Practical Non-interactive Public Key Cryptosystems      using Non-maximal Imaginary Quadratic Orders",      to appear in Proceedings of Selected Areas in Cryptography 2000,      Springer-Verlag      Jacob's publications page,       [      .ps], [local],      [      .pdf], [local].  2001 - Dan Boneh and Matt Franklin -       "Identity based encryption from the Weil pairing",      to appear in Crypto 2001      abstract and paper2002 - Jonathan Katz -       "A Forward-Secure Public-Key Encryption Scheme",      Cryptology ePrint Archive: Report 2002/060abstract and paperOther terms people have used for Identity-Based Crypto:Non-interactive Public Key Distribution  Non-interactive Public Key CryptosystemsRelated WorkForward Secure Signatures - Ross Anderson proposed a forward      secure digital signature.  A practical implementation was found --      FSIG.Comments, html bugs to me (Adam Back) at 
This page has also been translated into Russian hereand into Polish hereNSA's Backdoor Key from Lotus-NotesBefore the US crypto export regulations were finally disolved theexport version of Lotus Notes used to include a key escrow / backdoorfeature called differential cryptography.  The idea was that they gotpermission to export 64 bit crypto if 24 of those bits were encryptedfor the NSA's public key.  The NSA would then only have the smallmatter of brute-forcing the remaining 40 bits to get the plaintext,and everyone else would get a not-that-great 64 bit key space (whichprobably already back then NSA would have had the compute power tobrute force also, only at higher cost).Anyway as clearly inside the application somewhere would be an NSApublic key that the NSA had the private key for, I tried reverseengineering it to get the public key.In doing this I discovered that the NSA public key had anorganizational name of "MiniTruth", and a common name of"Big Brother".  Specifically what I saw in my debugger lateone night, which was spooky for a short moment was:O=MiniTruth CN=Big BrotherLiterary note: for those who have not read Orwell's prescient"1984" the Ministry of Truth was the agency who's job waspropaganda and suppression of truths that did not suit the malignantfictional future government in the book, and "Big Brother"was the evil shadowy leader of this government.  The whole book is online here.The NSA's Public KeyI put this together some years after the reverse-engineering stint,so there could be errors, but this is from my notes, the raw publickey modulus from the debugger:  8D9D6213D3EF03A7 A5CEAE99B8E9FF06  12E58ECAAB2939FE 72B41833B8B947A0  DF8111B561CE67FB 50844623CF88338C  E7BC80C5ECC31276 6075E13E12E956F6  59954F68B04F0FEA B6B82EFEC4E07BD8  4BC41FE3123AF70C 31688BCD5895BB00I figured it was in little endian format by trial and error; otherformats were easy to factor.  So the big endian hex representation is:  e = 3  n = \  00BB9558CD8B68310CF73A12E31FC44BD87BE0C4FE2EB8B6EA0F4FB0684F9559\  F656E9123EE175607612C3ECC580BCE78C3388CF23468450FB67CE61B51181DF\  A047B9B83318B472FE3929ABCA8EE51206FFE9B899AECEA5A703EFD313629D8Dwhere the modulus is 760 bits, and the public key formatted as aPGP key is (of course I made this user id up -- you can edit it towhatever you choose it's of course not self-signed):Type Bits/KeyID    Date       User IDpub   760/13629D8D 1998/10/25 Director, NSA -----BEGIN PGP PUBLIC KEY BLOCK-----Version: 2.6.3imQBsAzYyeuIAAAEC+LuVWM2LaDEM9zoS4x/ES9h74MT+Lri26g9PsGhPlVn2VukSPuF1YHYSw+zFgLznjDOIzyNGhFD7Z85htRGB36BHubgzGLRy/jkpq8qO5RIG/+m4ma7OpacD79MTYp2NAAIDtB5EaXJlY3RvciwgTlNBIDxkaXJuc2FAbnNhLmdvdj4==aoSi-----END PGP PUBLIC KEY BLOCK-----and here's what pgpacket has to say about the contents of thatkey:---------------------------Packet Type:Public Key PacketLength:108Version Byte:3Key Created:25 Oct 1998  01:12:02Valid foreverAlgorithm:1 (RSA)N:0xBB9558CD8B68310CF73A12E31FC44BD87BE0C4FE2EB8B6EA0F4FB0684F9559F6\56E9123EE175607612C3ECC580BCE78C3388CF23468450FB67CE61B51181DFA0\47B9B83318B472FE3929ABCA8EE51206FFE9B899AECEA5A703EFD313629D8DE:0x03Key ID: 0xA703EFD313629D8D---------------------------Packet Type:User ID PacketLength:30User ID:"Director, NSA "Comments, html bugs to  (Adam Back) at
cebollaCebolla - Pragmatic IP anonymityThis is the new home of the cebolla IP anonymity project. Cebolla provides multi-hop anonymous IP tunnels which use UDP fortransport.  The tunnel end-points are presented as networking deviceson the client and on the final hop.  The current implementation islinux only.If you want to contribute to the project see the source download linkbelow.Cebolla was written by Zach Brown; I Adam Back, am it's current interim maintainer.Etymology: "Cebolla" is "Onion" in Spanish. PapersFor details see Zach Brown's paper at the OLS 2002:Jun 02 - "Cebolla -       Pragmatic IP Anonymity",      Ottowa Linux Symposium, Jun 2002, Zach BrownJun 02 - slides from OLS 02SourceDownload source code from [source].Tech detailsThreat-modelCebolla's threat model is pragmatic: it does not attempt to be secureagainst an all powerful passive attacker -- if the attacker is able toobserve both the entry and exit points of traffic entering the networkthe game is over.  However the entry node alone should not be able todetermine the exit node; similarly the exit node should not be able todetermine the entry-node (or user of the entry-node).  This modelmeans link padding is not used. NetworkThe cebolla network is not fully connected, rather encrypted links aremaintained between some nodes, and this topology information isavailable to clients.TunnelsCebolla creates multi-hop tunnels in stages.  First a single hoptunnel is made to the first node selected by the client.  Then a newtunnel is established by tunneling through the first hop to the 2ndhop.  This can be repeated to provide multi-hop tunnels.  TheDiffie-Hellman protocol is used to negotiate keys, so tunnels areforward-secret.  In addition a symmetric re-keying technique is usedto provide forward-secrecy during the life-time of a tunnel.The tunnel establishment process negotiates keys shared between theclient and each node along the path.  The keys are associated with thetunnel ID, packets travelling down the tunnel have tunnel IDs at thelink layer.  The links between nodes are in addition encrypted to hidethe tunnel IDs.Forward-anonymityThe nested tunnel scheme described above allows Cebolla to provideend-to-end forward-anonymity.  The means no single node cancompromise forward-anonymity -- to compromise forward-anonymity, allnodes in the tunnel have to collude.Without end-to-end forward-anonymity, ie with the weaker hop-by-hop forward-anonymity offered by most other anonymity related systems, asingle rogue node in the path can compromise forward-anonymity byrecording information which would allow him to later compromise theanonymity of the connection by coercing other nodes to hand over longterm private keys.Cebolla's symmetric re-keying scheme is also forward-secret (keys arereplaced with the one-way hash of the previous key).  The symmetricre-keying scheme is much cheaper than a Diffie-Hellman keynegotiation, which allows Cebolla to offer pretty immediateforward-anonymity (down to the level of seconds).
(I published this idea in Mar 2001 on the cypherpunks list, this moreorganized write up was put here April 2002).A Hierarchical Auditable NamespaceI proposed on the crypto lists a few years back an ideaabout namespaces to create a censor resistant namespace.A namespace is a mapping from a human readable name intosome bit string (eg. ipv4 IP address, content hash,location handle, etc).The idea is to try to create a global namespacecollaboratively maintained by servers which audit eachothers behavior and compensate for rogue behavior incollaboration with client name server protocols.The aim is to create a namespace where Names are strictlyfirst-come first served and persistent.  Only the authorwho registers a key at the time he reserves the name isable to change the mapping.  Local censorship andrevisionism is allowed, but only in local views of theroot namespace.  Users browsers may be configured (oreven come pre-configured) to censor local names in thedomain they are distributed in.  (Eg. a .cn filter, or a.us filter).But anyone should be able to get to the root unmodifiednamespace, either by disabling the filters, or by usingsome syntax which indicates that the name is in the rootimmutable namespace.There are two protocols involvedPublic Auditability - Use Merkle Authentication Trees      [*] to prevent revisionism on the part of namespace      servers.  Namespace servers publish master hashes, users      and namespace servers audit each others adherence to the      global immutable root policy.Revision Recovery - The client software should include      protocols to accept notices from other namespace servers      that detect a rogue namespace server.  rogue namespace      servers responses pass through the revision recovery      protocol which works out if the repsonse is from a      modified part of the Authentication Tree, and if so      recovers the necessary original values from other      servers.  Servers cache the original values of modified      sections of rogue servers Authentication Trees.The combination of protocols in clients and serversensures that users can choose which filters they want tosubscribe to.Companies may be satisfied with the subset of names thatsurvive the policies of a monopoly unaudited root server.People who want more robust names can use the rootnamespace explicitly.For efficiency you probably want namespace servers to dothe auditing.  You don't want to audit every lookup backto the root even thought it is relatively efficient. Users can of course independently audit also.Denial of ServiceThe system proposed is vulnerable to Denial of Service.There is no barrier to hostile users creating names asfast as their network connections allow.A robust solution would be payer anonymous ecash, butthen we have boot strap problems, as there isn't one yet,and global e-cash systems robust against being themselvescensored are probably an even harder problem.Perhaps you could use hashcash to throttle name creationfloods.  Name creations are infrequent enough that userscould put up with a reasonably expensive computation. Users of names could also submit hashcash on the namesthey use so that popular names get higher valuedhashcash.Also you could probably retain auditability if you allowedpolicies of dropping the lowest valued names in event of aflood.[*] A Merkle Authentication Tree is basically a tree ofhashes to allow the efficient verification of aparticular leaf in the tree with log(n) queries.  Imaginea binary tree representing a namespace with names as theleaf nodes.  The parent of a leaf node is the hash of thepair of names below it.  The parent of that node withit's neighbor is the hash of it and the neighbor hash,and so on up to the root which is the master hash of allthe hash of hashes of names down to the leaves.Fortunately Merkle's patent has expired.
---[  Phrack Magazine   Volume 7, Issue 51 September 01, 1997, article 12 of 17-------------------------[  The Eternity Service--------[  Adam Back Information wants to be Free======================================================================Information wants to be free.  Censorship sucks.  Having your account yanked because some censorious idiot doesn't like you discussing hacking tips and tricks in USENET sucks.  Being tortured to death by some totalitarian country's military police for speaking the truth about government corruption sucks even more.  Have friends who have been hounded by the Feds, SPA software police, or system admins who believe in security by obscurity?  Had nasty threats made by censorious system admins for helpfully drawing their attention to flaws in theirsystems security?  Ever had a control freak try to get your web pagescensored because they don't like its content, or simply because they get their kicks harassing people?  Ever wanted to publish something on the 'Net but felt intimidated by censors?Do you consider that free speech is your right as guaranteed by the first amendment of the US constitution, and do you therefore also consider it your right to speak anonymously?  There are lots of reasons to protect the ability to speak anonymously.  Anonymous speech is required for truly free speech.  Strongly anonymous free speech is the freest speech of all. If you're going to preserve your ability to speak anonymously, and protect your right to free speech you might as well do it properly...Want to do something to help free speech?  Want to piss off the 'Net censors?  Want to piss off censorious Governments?  Read on...What is the Eternity Service?======================================================================The Eternity Service is a distributed data-haven, it takes a differentapproach to ensuring unpopular content can be published.  Traditionally unpopular content has been surreptitiously exchanged via DCCs in IRC, or PGP encrypted email, or FSP, or in funny named directories via FTP or via agreed file names in incoming directories set drwx-wx-wx.  Other kinds of unpopular content have been published on web pages for a short time until the censor gets to work and threatens the ISP, the publisher's employee, and the publisher with law suits.  Sometimes these web pages get mirrored, if there is someoneinterested, and spoiling for a fight, or if the content is only censored by force of law in one jurisdiction.The Eternity Service deals with censorship more directly: it confronts the problem in a more general way with the aim that anyone should be able to publish anything anonymously in a convenient persistent, uncensorable data-haven.So in a nut-shell that is the design goal of the eternity service, to allow anyone to publish material which others would like to censor. For convenience the publishing medium addressed is the World Wide Web.Systems for publishing anonymously in USENET news and email already exist: cypherpunks type I and type II (mixmaster) remailers.Why the name `Eternity Service'?======================================================================There is a cryptographic paper by Ross Anderson called "The Eternity Service",which is where the idea for this implementation came from.  I rather liked Ross's name for his conceptual service, and instead of thinking up some other name I just "borrowed" his name.  Readers might find his paper interesting, it's on the web in htmlized form at:    http://www.cl.cam.ac.uk/users/rja14/eternity/eternity.htmlRoss's design is quite ambitious, so I simplified his design in developing the software included with this article.My implementation shares Ross's main design goal, which is to create acensorship-proof, long-term document store, but its design has been made much simpler and less ambitious initially to make it easier to implement.  The main simplification is that I built the design on top of an existing hard-to-censor distributed distribution channel: `alt' USENET newsgroups.  This design is described in the next sections.The motivation for providing a simplified version was to have something people could use practically, today.  Another reason is that by releasing this design, and it's implementation, it allows you, the reader, to play with it, and to contribute to it, improve it in a piecewise fashion in the good tradition of free software on the 'Net.  The design calls for many eternity servers to be in existence to make it hard to censor.At time of writing a mailing list exists for discussion on using and improving the eternity service.  Instructions on how to subscribe the eternity mailing list are given at the bottom of this article.USENET and distributed systems======================================================================The Internet was built to survive nuclear attack.  It would survive such anattack because it is a distributed system.  Distributed systems are hard to break, and therefore, hard to censor.  USENET, particularly the `alt` newsgroups offer the most amazing chaotic discussion areas.  The articles which are posted often contain materials which would be considered illegal inmany jurisdictions.  And yet USENET lives, and `alt` USENET newsgroups thrive. Extremely well funded attackers have tried to remove individual `alt` USENET groups, and to censor posts in alt USENET groups.  They have all failed.The reason that USENET is hard to attack is because it is a distributedsystem.  The network of news feeds has some redundancy.  USENET articles enter the news distribution network from anywhere in the network.  If a censor in one country succeeds in persuading a news site to censor its feed and notcarry particular alt groups, it doesn't affect the overall system that much.  There are lots of other nodes carrying the groups, disgruntled users will switch ISPs, and disgruntled down-feed sites will switch feeds.  The system routes *around* censorship.  There are just so many USENET admins with individual opinions, and commercial interests in carrying groups users want toread, that USENET can not die.It occurred to me in trying to design a simplified eternity service, that it would be useful to borrow some of Usenet's indestructible nature.  USENET is part of the landscape; it's here to stay.  If we build a new distributed distribution system from scratch, to start with there won't be many nodes.  The censor will have any easy time censoring a few nodes, he'll just go and harass each of them in turn.With USENET on the other hand, it has been around for so long, and is carried at so many sites that it would be a huge task for a censor to even have a significant affect on USENET.So, the design of my eternity server aims to allow operators to point the finger at USENET and say: "that's where the content is coming from, if you want to censor anything go attack USENET".My eternity server design is a service designed to blur the differences between USENET news and the Web.  It provides an interface which makes a stream of encrypted USENET news articles look like WWW pages with a persistent URL.  As the default disclaimer for eternity servers says:    Note to censors: Eternity servers are specialized search engines for    reading web documents from USENET news. The pages you request are    actually USENET news posts which the server is searching for,    reformatting and forwarding to you. The administrator of this server    has no control over the content of USENET news, and will not be held    responsible for any documents you instruct this server to forward    for you.Eternity Server design======================================================================Once you accept the idea that it would be nice to borrow, or build upon some of USENET news's strength as a uncensorable distribution mechanism, the next issue is achieving this, technically.  The main differences between USENET news articles and WWW pages is that USENET is transient, the articles expire in newsgroups, and that USENET articles have no persistent globally addressable locator.  USENET is not as convenient as the Web; there are no hypertext links between articles, and there are no inline images.Eternity service articles are WWW pages specially formatted and posted to USENET news.  The eternity server reads news and translates Web page requests into GROUP and ARTICLE commands to an NNTP news server (or file system accesses to a local news spool).  (The default list of newsgroups to read consists of one group: alt.anonymous.messages).Web pages are often updated, as one of the interesting aspects of the WWW as a publishing medium is that it allows people to maintain up-to-date information. This maintains interest and keeps people coming back to an interesting site to see what else the author has collected, or what other related pages have been added.  A sense of community can be built up with others submitting interestinglinks, corrections, and tips to the author.To provide the possibility of updating web pages with the eternity server, the eternity formatting convention allows submitted web pages to be signed with PGP.  This ensures that no one else can replace your pages with other pages.  Being able to replace your page with a blank page would allow a censor to temporarily censor you.  (Only temporary because you could always replace the blank page with the real document again).With a PGP signature this is prevented... and the system becomes such that eternity virtual domains are very much first-come first-served.First-come first-served naming======================================================================Eternity URLs are all under the non-existent Top Level Domain (TLD) "eternity".(Other TLDs being .com, .org, .edu, .ai, etc) Eternity URLs are therefore of the form:    http://*eternity/*Where * represents any string of characters.On the Internet domain names must be resolved to IP addresses via Domain Name Servers (DNS).  The owner of the TLD you desire a domain name in charges you for registering a domain.  Internic (who currently has a hotly contested monopoly on TLDs .com, .org, and .net), charge $100 for the first 2 years, and $50 for each year thereafter.Eternity domains don't exist in this sense.  There is no root domain server for eternity.  You don't need to buy eternity URLs from anyone.  Nobody _can_ own an eternity URL in the normal sense.The first person to submit a document with a URL:    http://bluebox.eternity/gets it.  If that person signed the submitted document with PGP, no one will be able to take over that URL.  If that person signed the submitted page with PGP and threw away the key, it would be uncensorable for all time.  They couldn't even remove the document themselves if they wanted to.  Throwing away the key might be a good idea if the publisher isn't publishing anonymously and expects reprisals.The fact that one user has submitted a signed web page for http://bluebox.eternity/ doesn't stop BlackBeard from putting up his design at:    http://bluebox.eternity/blackbeard/That is to say ownership of any given URL, even the top level URL of a virtual domain, doesn't give any control over who could submit documents in that virtual domain.  Of course you don't have to link to their pages.  But those pages will show in a directory search of your virtual site.Directory searches======================================================================Submitted eternity news articles can set options controlling whether or not the document is listed in the index.  The choice is either "exdirectory" (the default) or "directory".  This is useful because if you created the URL for http://bluebox.eternity/, you might like to include some inline images, or diagrams, or a series of other pages hypertext linked from that page.  So you would set option "directory" for the main page http://bluebox.eternity/, and set all the inline images and smaller pages linked from it to "exdirectory", as a convention to save the directory becoming cluttered up with junk.You can also use "exdirectory" if you don't want to generally advertise your page.  Note this is not all that secure if you access your page via a public access eternity server, as the server operator could modify the server to record all exdirectory URLs.You can request a listing of all eternity pages at an eternity server by filling in the form with virtual URL containing a wild-card:    http://*(Exdirectory documents will not be listed.)You can also include an option to give a small description (a maximum of 60characters) which will be listed beside your virtual URL when someone does such a search.You can narrow the search to just list all root eternity documents with:    http://*/Which will find:    http://eternity/    http://bluebox.eternity/but not:    http://test.eternity/example1/You can also do:    http://bluebox.eternity/*which will find:    http://bluebox.eternity/    http://bluebox.eternity/blackbeard/You can combine *s to find what you want.  Advanced searches are possible:    http://*box*.eternity/*blue*and so on.Eternity materials are likely to be targets for censors, and it is possible that they might try to censor the directory listing itself.  Even the URL could suffer.  (Did you know that Internic turned down some guy who wanted to register `fuck.com'?)  I'm sure someone creative could up with something to upset a censor in the 60 characters allocated for URL descriptions too.For these reasons the eternity server operator has the option to disable directory service.  With this option disabled looking up URLs with wild-cards (*s) in them will get back a notice explaining that directory listings service has not been turned on at this server.Servers with directory service turned off make less useful servers, so it is hoped that most eternity server operators don't have to do this.  However, an eternity server with directory service turned off still works normally for accessing known URLs, and you could maintain the directory listing yourself, or use a directory listing at another site.Formatting Eternity documents ======================================================================Eternity documents submitted as USENET news articles are formatted with PGP.  There are three of reasons to format messages in USENET to make them not immediately readable.1) It prevents censors from working out which articles correspond to which eternity web pages.  Depending on the options chosen this can degrade to just obfuscation.  Obfuscation alone however can be useful as censors are often not particularly clue-full.2) PGP includes compression, so the articles are much smaller.3) If used with highest security options amongst a group of people who follow security guidelines it means that a censor will have no way to translate the articles back into WWW pages, or even of obtaining the URL.To demonstrate the formatting requirements for eternity page submissions, we'llwork with an example page, http://bluebox.eternity/.You'll need an implementation of SHA1 for this.  There is a C implementation, and also a perl implementation in the eternity server distribution.  Some systems may already have /usr/local/bin/sha1.(Note: below "echo -n" is used -- on Suns the built-in echo doesn't handle the -n flag properly -- you'll have to use /usr/ucb/echo instead)0) Generate a Nom de PlumeIf you are planning to sign your document, you probably won't want to sign it with your normal key, so you'll generate a new keypair for the purpose, this will be your pseudonym, or Nom de Plume for the purposes of publishing this document.  The "-u fred" tells pgp to use that user id.  See pgp documentation for how to generate keys (use pgp -kg).Once you've generated your key, extract it to a file with:    % pgp -kxa fred fredwhere `fred` is your new user name.  It will save the key as "fred.asc".  We'll use this file below.1) Sign the documentWe create a normal web page such as you might put on your home page.  You can view the page with Netscape (or other browser) by opening it as a file URL: file:/home/fred/bluebox/index.html to check that it looks OK, and that any inline images line up correctly etc.You can use relative, site relative, and absolute URLs normally in eternity documents.  You can also use absolute URLs pointing at other sites in the normal way.To submit index.html as http://bluebox.eternity/ we first use PGP to ASCII armor the document.  If we want to sign it at the same time as ASCII armoring it, so that we can update it later, we can do:    % pgp -sa index.html -u fredThere is another option to encrypt as well as sign and armor, which will be discussed more below, to do this do:    % pgp -csa index.html -u fredIf we don't want to sign it, we do this instead:    % pgp -a index.htmlIn either case after this operation PGP will create file "index.asc" for us.  Rename index.asc to something else, say "index" (Another legal combination would be to encrypt and not sign with -ca).2) Set the optionsIf you signed the document, you need to include the key.  Insert the keyfile (fred.asc extracted in step 0 above) into the document "index".  Order is not significant.  Then the ASCII armored document (pgp munged html or gif file produced in stage 1), the keyfile "fred.asc", and the flags described below can be jumbled up in order.You now have several flags you can include to control how your URL will be cached, how it will be displayed in indexes etc.The flags are:    URL: http://bluebox.eternity/The flag URL: sets what the eternity virtual URL will be.  It must have .eternity as the virtual TLD.    Cache: yes    Cache: encrypted    Cache: noCache settings, choose one of those.  These cache settings override the used eternity server's settings if doing so will increase security.  "yes" and "no"are obvious.  "encrypted" means that the document will be cached but it will be encrypted in the cache in such a way that the URL is required to decrypt it.If the document is exdirectory this means that the server won't know the URL.    Options: directory    Options: exdirectoryChoose one of those options.  This flag controls whether the URL will be listedin the URL index.  "directory" means it will be listed, "exdirectory" means itwill not be listed.  If you give neither option the document defaults to exdirectory.    Description: Freds blue box pageThis is the description that will appear in directory listings.  If the document is exdirectory there is no point giving a description.So the file "index" is likely to look something like this once you've finished editing it:    URL: http://bluebox.eternity/    Cache: yes    Options: directory    Description: Freds blue box page    -----BEGIN PGP PUBLIC KEY-----    ...    -----END PGP PUBLIC KEY-----    -----BEGIN PGP MESSAGE-----    ...    -----BEGIN PGP MESSAGE-----Where ... indicates the rest of the ASCII armored key or message will be displayed.  Some of these parts can be omitted as shown above.  When you are submitting an web page update you can omit anything you're not trying to change.  (That can be everything, so your updated document has nothing but the new message part).  However this is not necessarily a good idea because it will not make sense to an eternity server that has not seen the first document, for example if your first document doesn't make it via USENET to onesite.3) Package the document "index" ready for postingYou have a couple of choices here.  Method A (most common):Either you can encrypt with PGP -c:    % pgp -c -z"eternity" indexMethod B:Or you can encrypt with the SHA1 of the URL with 1 prefixed,    % echo -n 1http://bluebox.eternity/ | sha1    dab1a32aba30b4e3a9594da143c33d2ba9b00a38    % pgp -c -z"dab1a32aba30b4e3a9594da143c33d2ba9b00a38" indexMost normal eternity URLs which you're expecting to be indexed on the directory services of public access eternity servers should be encrypted with the first simpler method.There's not that much point encrypting with the second method unless your document is going to be exdirectory, because once the document gets in the URL everyone will know the URL anyway.  It might take a censor a little longer to figure out.If you were planning to only access the document via private, or local eternity servers, you can reveal the URL only to those you wish to have access.However this might not be that secure because people may be able to guess yourURL if it is something common as above.Method C:For this reason you have a third option, which is to encrypt at the same time as signing and ASCII armoring as described in step 1.  You can combine that option with above method B (pgp -c with sha1 of 1) to conceal the URL.  Or alternately you can expose the URL by using method 1 above (pgp -c -z"eternity"), but have the document encrypted in step 1.  (This would allow you to have a directory entry, but the page not accessible without knowing the password chosen in step 1 when encrypting.The result of the last pgp -c operation for any of method A, B, or C will be file "index.asc".4) Post the article anonymouslyThe subject field of the article should always be the SHA1 hash of the URL:    % echo -n http://bluebox.eternity/ | sha1    2e730bcd62dbc63aaedde56c06625abeeb38dd92Now post the article to USENET news (by default eternity servers read only newsgroup alt.anonymous.messages with release 0.10).You can test your eternity submissions work by installing an eternity server on localhost.  If you get stuck you could ask for assistance on the eternity mailing list (instructions on subscribing are at the bottom of this article).To post anonymously you'll need to post via anonymous remailers.  Some remailers can post to USENET directly, for other remailers you have to post via a mail2news gateway.Instructions on using remailers, and windows and Unix clients to automate the process of using remailers can be found here:    http://www.stack.nl/~galactus/remailers/You can find a list of mail2news gateways here:    http://www.replay.com/mail2news/People are already working on a nice easy to use CGI interface to eternity servers over on the eternity list while I'm typing, so perhaps when you read this you won't need to know the above information in such detail.Caching======================================================================With WWW technology, caching is often used to speed up accesses.  There are a number of caches in effect with a typical web browsing session.  The Netscape browser for instance has both a memory cache, and a disk cache, which are configurable in size.  In addition Netscape can be set up to use a proxy cache,which is a special caching service.  Users of a proxy cache send their web requests through it.  The proxy cache checks each request to see if it has itin the cache, if it does, it can deliver it back if quickly.  If it doesn't it will go and fetch whatever URL you are asking for and remember it for next time.  A proxy cache would normally be used by a group of web users, perhaps a university campus, or an ISPs customers, or a companies employees.Caches traditionally have some protection from censors -- it's an automated process after all -- your average ISP hardly wants to be responsible for the contents of the disk on its proxy cache machine.For performance reasons the eternity server also has a cache.  The cache behavior is configurable.  The server operator can set his caching preferences when he installs the server by editing eternity.conf.  Possible settings are "on", "off" and "encrypted".  Setting cache to "off" is safest, then you have no eternity documents on your disk.  The "encrypted" cache option means that cached documents are encrypted with PGP -c and the SHA1 hash of a 1 prependedto the URL.  If the server also turns off directory service, and does no logging this provides reasonable deniability of knowledge of contents of documents in the cache.  Even with directory service on, it provides cache set to "encrypted" provides protection in that the server operator will not know the URLs of exdirectory web pages.Further work======================================================================There are a few unimplemented features that could use some work.  These features are being discussed on the eternity mailing list (see instructions for subscribing below).A first immediate problem is that the eternity server has no cache replacement policy.  Your eternity cache will just keep growing.  This is great for ensuring articles with caching turned on don't disappear due to expiring in the news spool, but as eternity grows more popular it will become impossible for each single eternity server to hold the full document store.The solution to this problem is quite complex, and is the subject of the next implementation effort on the mailing list.  One interim solution is to use the USENET searching facilities of services which archive USENET such as www.dejanews.com and www.altavista.digital.com.There are several tweaks that would have to be done to be able to use USENET archivers as sources of eternity documents.  Two main problems have to be combated: 1) the archives make attempts not to archive 7-bit encoded binaries to save space, 2) you can't search by 40 character hex numbers to find subjectfields.  These are both easy to overcome, but the overall solution is not that attractive because the archivers will be a single point of failure.  Censors will attack them, and they may be hostile to eternity servers due to our bypassing their 7-bit encoding filters and consuming space on their soon to bemultiple TB raid file servers.A better solution is to build a distributed data store that allows eternity servers to exchange documents with each other in such a way that the eternity servers together form a virtual raid file-server where the documents are spread randomly and redundantly over the nodes.A simple starting point to allow this is to create a second long-term cache area, and to have a cache replacement policy for that area which selects a random document for discarding.  This cache replacement policy will ensure that statistically some servers will have a given document.  Next we have to design a scalable method of forwarding requests to other servers to ask for old USENET articles by URL hash (subject field).World-FS======================================================================Another approach to improving the eternity server is to actually use and develop the full set of techniques described in Ross Anderson's paper to build a distributed file system (DFS).  I dub this direction `world-FS' because the aim is to build a worldwide distributed, redundant, uncensorable, and virtual file system.  This file system would be designed to withstand a nuclear war, and to easily withstand the best efforts of one government to censor material in it.  A world-FS done well could easily replace the current pattern of web page hosting.  The world-FS would have different interfaces, or drivers, to allow it to be accessed as an NFS file system, or as a distributed web based eternity service.The eternity server described in this document would then be superseded, and become the HTTP driver interface for world-FS.  An FTP, or NNTP (USENET news) interface could also be built for the world-FS, or for parts of it's directory tree.  People discussing this so far have thought that you would need to include ability to pay for service with an anonymous payment system (or withmultiple payment systems).The eternity mailing list is also for discussion of world-FS, as it all falls under the umbrella of Ross Anderson's concept of an `eternity service'.Comments and collaboration requested======================================================================Your contribution matters.  Progress of the eternity service beyond this point relies on a collaborative effort.You can collaborate by doing any of the following and reporting back to the eternity mailing list how you got on (subscription instructions below):    - submitting documents to the eternity document store    - installing an public access eternity server in your account    - or persuading your ISP to install one    - or installing a private eternity server in your account    - finding and reporting bugs to the mailing list    - contributing code    - contributing ideas for more efficient distributed request protocolsAdam BackMore information======================================================================Eternity mailing list    send message "subscribe eternity" to majordomo@internexus.netThe eternity mailing list is for eternity service users, eternity serveroperators, and eternity server developers to discuss issues to do with eternity.  Issues include censorship attempts, operator liability, practical attacks on the security, and discussion of new protocols, and discussion amongst developers and users on the best way to design the next versions.Cypherpunks mailing listCypherpunks write code.  Cypherpunks are the people who bought you type I and type II remailers, remailer clients, plus many, many other crypto applications.Governments are scared of the implications of distributed systems and freedom to use cryptographic code.  Cypherpunks are crypto-anarchists, and they shall inherit the earth.  Information is power, and cypherpunks are applied cryptographers with attitude.  They don't care if governments don't like their code, in fact they probably view it as a compliment.  You'd be surprised at howmany cryptographers, net journalists, cryptographic consultants, small ISP owners, and Netizens are crypto-anarchists at heart.  Netizens never were very keen on government intrusions into the 'Net.  Read Tim May's Cyphernomicon for a mega-faq on cypherpunks, and crypto-anarchy.  See:    http://www.cc.oberlin.edu/~brchkind/cyphernomicon/To subscribe to cypherpunks:    send message "subscribe cypherpunks" to majordomo@cyberpass.netor  send message "subscribe cypherpunks" to majordomo@algebra.comor  send message "subscribe cypherpunks" to majordomo@ssz.com(Some time ago there was an attempt to impose moderation on the cypherpunks list, and this is the reason for this rather curious situation of multiple mailing lists, it is designed to be more resilient to censorship -- if someone pulls the plug on one list -- the rest continue without glitch.)Cypherpunks is a high volume mailing list.  There is no moderator,Software    http://www.cypherspace.org/~adam/eternity/Please set a server up a public access eternity serve in your account.  You can also operate your own eternity server for your own use -- this is the moresecure way to browse eternity.  If you have any kind of dial up or internet connected Unix system you can do this.You'll need a web account with cgi capability, access to perl5, and read access to an NNTP news server, or a local news spool.  Cron access is useful but not essential.Current Public Access Eternity Servers    http://www.replay.com/aba/eternity/    http://moloko.insync.net/eternity/    http://eternity.internexus.net/    http://eternity.infinetways.net/Contacting the author    aba@dcs.ex.ac.ukor  A.Back@ex.ac.ukor  aba@replay.comPGP encrypted mail preferred, here's my key:Type Bits/KeyID    Date       User IDpub  2048/28B24551 1995/09/09 Adam Back  (High Security)           Key fingerprint = 01 8F 04 06 5C DD F3 33  D8 84 C4 63 85 BA 50 E8-----BEGIN PGP PUBLIC KEY BLOCK-----Version: 2.6.3imQENAzBRMbMAAAEIANoe/ABNaJv6/ETtDzlih4P3znc63CMP4ViFWStxyeWWjxd2L8WOsM0b1naV4YmeRrd34GUsnZFetItToVqsvT5tKcwJKHwEWeXEQMbCM3cbaAxB+MGSx9PoLRc4ZLz79q/hMQXybNKmw5Rk7NwsyLiejZR+jt2Eoy/BHeFMunxfXD8j38927FZBxG3UgCbL75ImJhWVsn8IoDOJ5psTfJwRcAZlkxsrpDSx2OIb6G35+pwmmEv8O066wOij7eMTQ8VQ5+rbn2ql0Ubsz3qA2szP2KZYlmobjwj5M82dmLcPfG9CbExMBldd8poJyBCn0e04kAFiGBJJPnvKqCiyRVEABRG0LEFkYW0gQmFjayA8YWJhQGRjcy5leC5hYy51az4gKEhpZ2ggU2VjdXJpdHkpiQCVAgUQMli+7B98EdWB2LS9AQFF0gQAjiAOPPCs7s0VCHoFI2IWMEcAeQInmnl2p+6rpsvIxjX1v3wBqqstgBu5aCLY9Uns+iKjzcnt5DTj6NPhJ8EOlefwgHUssiBLTsw7tOvT9fQwcIXOE5ikGP7jRObTq3a2Vtz4/O/YgN0KQnWcqTDuadeP17cJ2bbaWJpZiGDyWGSJAJUDBRAyIN+rRlGJMStI9vUBAXJTA/4wzbGnP9X0luqRYcfj51bamX9WdTDG9A8AvKngTbMG87x2jV6vUicIP9XMERSl6fgT35Q2BYSCKGlhH5gGYkC+IfkyMZFHvZMdATurb4MuRivWpv30gTVstoF61CN3JKF1N/j1Ez2LOfFWFW+miceowAPrKr3e3zHCRXyewv75BIkBFQMFEDBW0M+xVzBJFqEkZQEBBQEH/AnpNhKJh1IPmii7X7xxmccMKFnq5R2DAP4Z+OJQ/otoy6AXifI9Y5aDYnm7sbPZX9uBk93ubf4Zm/v9wOcOKL6hXcE4+tvGSQA+rAPgph1+t96iDTSTGwf5ZKVp+LfJXBz63wZHDJ+JlSTDRl9YeSxeRZgAo2XJtI/hv7fazds4CK0jFwDSWUtQUd7my9znsJ92W0UONe6iltnFUvywUICNGyXxCHV4RDPv/wTmDKarzHm44OfdzXhI+oTQvY3lG51gU6TMjR6Q/bjy9YEYpTcDRvOpMmkJ4audtCxG/w82OG6lKnFw8Hv46VcpQVPt2YZMbgjUJBIQi6FedDjeky6JAJUDBRAwUUqYKci4nVVqSmcBAaFJA/wJ0vcYZm8V7gqlk+nDzjIDvGNP1IaQtBFaXE/imyQaqyKeoIsyzhCWCNnsCvu8Cq2ZwmD63wBKzs+63ZgzJ7h1hC4lYKUB1mCsF0UnrZNJ7rtWDVMa0aLlvxIia7qsmbhaZ6ibs5+juqn3CKUvjCJKyOpuS0Lmrem5EXk9Byu5/IkBFQMFEDBRSjc+e8qoKLJFUQEBWjEH/3yb3JYhsjoqZdEjA1xSZJcjyoTnPG0vUhaDoi6OhTByqYShLe14RU9rYDzpOGmdwpZ6GSwF4X0uBAH1lCGnsi6QQXrnsp1fBq/6+TQy1nBs2FZyj/YTXQIKhhXIH700ed0Nqg4okwtovyUqX0xbqlA2Sv1N+XC6hKucbl9XWOQbKi8OM8VEKeLnrY9Glzrxk9piVb+eCT1RJnLovWdfPL7WFOwSbOQ/I9aBjBKBHYMGdLihf7PYeb3Eg3B8Kt3IDfipPUFfXjqes94hpqQl/DGpWSpDHHFQ5cTBiQIB4twFzz4bI1HMVEayKboPliJl3dI9vY0SQJ58b6OFYJTB4Jc==E4rO-----END PGP PUBLIC KEY BLOCK-----Here are SHA1 hashes of the eternity service distribution hashes.asc-----BEGIN PGP SIGNED MESSAGE-----eb32d19e992e4663df29141cedf6ec0aa3f92af3 pgp/config.txt7b1da1bd199b2dded10216a3d19e4b05bbb66c90 eternity.confa44cec86d7d0f1cf1239f1c00bb21dc3476148b4 sha1.pl.dist1f9f7860c8c2d5b376c8bffa7417ffe54b8b1429 newsgroups926a9630fd214b756ecc18658d813017b288bf2c sha1/sha1.c58989aa6f40b06136d078a96ad958b482756fe8f sha1/endian.c2d46e74b805ee06d3960ff756a09407f0b3267fa sha1/sha1.h21e7e596a715c6ed247f9444393df675d7447f23 sha1/endian.h5f9c194f542960c8e7f9f6d81f84cd3b62dd4032 sha1/sha1file.c4544f194e381a3b64150f3761900993d28c5f465 sha1/sha1test.cea58eec253cdb4af6d3958d94cebfbe39988da44 sha1/timer.c22a60ac9aa0242ad6ee00da8781500c5c1311837 sha1/timer.h67d37d81d0064c2a0a1a369cba2cfc2f9d878803 sha1/types.hf7691ef67ac7a111082c6730b045ea2dc00dd903 sha1/compiling01a7b85827ff35583bd11cecb7470c4917fdd0ea sha1/READMEefc53ecc93eb1105341f4e250ecf654a44a11394 sha1/Makefile5375b154bd0724dc0c6ee6fac59bbc5c93a6a209 adam-key.asc0b9849c2332e5d7aa7714adc67861465d99b34db mime.typesb50a661ba69747c8969ebfb9c997eaf0f1b75893 READMEd498a12d0a795d3ae22bc059631293b0a0ab4cd1 ANNOUNCEba8ccee1f86dc5872b5ce95c0e2e494924b927f8 configure6f9bcf72be9f836f5201bc430cc764828fda68ba news/alt/anonymous/messages/1ac26faf5df1e14eaefa6e0e05f5be2d2f1ee67db news/alt/anonymous/messages/275ead2fb83bf3fa2c701b70741097f4956fb9043 news/alt/anonymous/messages/34c892147c69fcfb60803587c5606427d1641d473 ecatfa3b13f3e8241936795d97f72fe647f0a4a26902 CHANGELOG31cc2c663972f536922f3603625804a42b40c367 UTILS08120e964cb8b61f2c95ac155a3f75ce8b27535b dcrypt0fded38fd70c8626551e7bb21657cd960c2b8f67 sitegrab.dist7121ab8cd3e54bc962524054c95316b28d8c76e4 dev/submit56a1cb622bf8df7f863e8449a97ef8746a0d2469 dev/submit.htmlf1b6720b0861b1d79fbedcfa4cc694b1172c81a1 SITEGRAB428d389aa228d9e96c678d4400179df1ab5db0a3 fred.asc3ed6458862762fa993a900ec1b5dc8e2c739f61c eternity.gif5ea784f32dc51d74ae98134adcd93126230d5a0f rsa.gif2c62082f57ca8c0019f741d04f5f14133976bb15 cypherpunks.gif3d7f09b91b04577dc4406eb9493753dc1e3ba7d2 datahaven.gif8016173f3db9fccd0b787c9682e7b7bec1ada3b8 index.html.dist108e0ef9d29387e3cf57b68614a4e8b2961c2d02 disclaimer.html7ca4684965a7b4d51ad032f85c20480f0cd175fe eternity.cgi.dist08b072350488abc3ac6337ce95d7cf881e1f547b directory.html.dist769d9620c85de07a3ce6703a39b56eafdd3cad9d host.html24f17a65a4a637d60c5cbaab485eda231adb62c6 dbmcat.dist584d76031069f89fef3288cdbb6bed6e89ec7fd6 ecrypt.dist122584c63267811628cc790ef898e9d651cdc728 LIST-----BEGIN PGP SIGNATURE-----Version: 2.6.3iCharset: noconviQEVAwUBM/L+RT57yqgoskVRAQHpdAgAjbGfqr4FaycrS/LOHq4TnAQIBoTYx+6kcG9DTnUMp/gQSXqwBzvSv1bmou/+nwvH/qC5UgXc7Ko98rT8+tAatfrZj3u1g36Ma63oWtonLFJowOO8w1jBiPSpl44kT25hPYZ2qUscVC1qGzbSmutHhDyToY4y4i7Lv2TARR4Jq3dJI67WT63dxr1/o+AnTtNZBTq5c9z5LzfQWVfP9HRaOgYXF6d4LrVZ7NF3YKImEe5914L45CUW+OjJcsabGufFVj4waR0kNhdmA7ZQT3cxkg5Ygv6jhtcnq7Ys67hMAYU0TGrxvyogEy23FyzXC5wi1JY2NBYnE+AuJXObDGB85w===Xfz4-----END PGP SIGNATURE-----[The source code for the server can be found here]----[  EOFComments, html bugs to me (Adam Back) at
PGP TimelineThe topic of PGPs history seems to be fraught with controversy, and itis difficult for a new comer to discover the full story.This FAQ lists as much detail of the history as I have been able togather together.  My part in the creation of this document is tocollate information, all of the information is obtained from others,from email comments, from my reading of other peoples past cypherpunkslist posts, usenet posts, and from my reading of the resourcesavailable on the WWW, and the pgp source code and documentation (goingback to version 1.0).I think there are still many inaccuracies, so if you have anycorrections, extra information, or know anyone who you think may knowmore, feel free to forward them a copy for comment.Adam Back(pgp on key servers, or here)An html version of this document can be obtained from:http://www.cypherspace.org/~adam/timeline/PGP timeline and brief historyContents Definitions of acronyms History of crypto as it applies to PGP Birth of PGP USG decides they don't like PRZ PRZ, MIT and RSA sort out earlier patent issues Current legal status ITARs viewed from inside the US ITARs viewed from outside the US Definitions of acronymsPGP Pretty Good PrivacyPRZ Phil R Zimmermann, internet folk hero, author of PGPRSAThe RSA public key crypto algorithm as used in PGP.  RSA standsfor Rivest, Shamir, and Adleman (its designers).RSADSIrsa.com, RSA Data Security Inc, patent holders of some publickey stuff, which they claim means that no one can use RSA withoutgetting a license from them.  They have a www page at: http://www.rsa.com/PKPPublic Key Partners composed of RSADSI plus Cylink (plus others?)(now disbanded)ITARInternational Traffic in Arms Regulations controls export ofcontrolled munitions from the US, things like militaryaircraft components, biological and chemical weapons, and also(very strangely) cryptographic software.  See:ftp://ftp.cygnus.com/pub/export/itar.in.full.gzfor the full text of ITAR (file is GNU zip format).PKPublic Key (cryptography) as opposed to symmetric key cryptographyPK is also known as "asymmetric key" cryptography.NSAUS National Security Agency, US govt's largest spook agency.whimsically known as No Such Agency because until recently theUS govt tried to deny they even existed.  (Also the lettersNSA are jokingly said to mean Never Say Anything because theirpublic relations technique is usually "no comment" to avoidgiving anything away)CIAUS Central Intelligence Agency, another US spook agencyDEAUS Drug Enforcement Agency, agency charged with carrying out the"War on drugs".NISTNational Institute of Standards and TechnologyODTCOffice of Defense Trade Controls, USG group charged withenforcing ITAR.  They consult with the NSA, the NSA has thelast word on what gets export approval.USGUnited States GovernmentETHZEidgenissische Technische Hochschule ZurichZLDFPhil Zimmermann Legal Defense Fund (now closed since his investigationwas dropped)IDEAInternational Data Encryption Algorithm invented by Xuejia Laiand James Massey at ETH in Zurich.  Patent owned by Ascom-Tech.Bass-O-MaticSymmetric key crypto algorithm designed PRZ as used in PGP1.0.  Bass-O-Matic was weak, and after having thisdemonstrated to him, PRZ replaced it with IDEA inlater versions of PGP.History of crypto as it applies to PGPThe year is 1976, a cryptographer and privacy advocate named WhitfieldDiffie, together with an electrical engineer named Martin Hellmandiscovers public key cryptography.  (DH key exchange is still acommonly used key exchange protocol -- DH = Diffie-Hellman).1977 Ron Rivest, Adi Shamir, and Len Adleman discover another moregeneral public key system called RSA (after surnames Rivest, Shamir,and Adleman).  R, S & A were researchers at MIT (significant later,because MIT has part ownership of patents.)NSA tells MIT and R, S & A that they'd better not publish this orelse.Amusingly Adi Shamir (S from RSA) isn't even a US citizen, he's anIsraeli national, and is now back in Israel at the Weitzmann Institute.Who knows what the NSA would have done about him if they had succeededin supressing RSA - not allowed him out of the US?MIT and R, S & A ignore NSA and publish anyway in SciAm July 1977, inan article entitled "New Directions in Cryptography".  They laterpublished RSA in Comms ACM (feb 1978, vol 21, no 2, pp 120-126 (aninternational publication) in case you want to see if it's in yourlibrary - it's in Exeter Univ (UK) library).Because the publication was a rush job due to the NSA, R,S & A and thelater formed PKP and RSADSI lose patent rights to RSA crypto outsidethe US.  This is because most places outside the US, you have toobtain a patent *before* publication, whereas in the US, you have oneyear from the publication date to file for patents.  This also hadimplications for PGP later.  Another issue is that the patent law inthe US is unusual in that it allows the patenting of algorithms (wellalgorithms as embodied by a system for a specific purpose -- what isbeing patented is the system).  The RSA crypto system would probablynot have obtained a patent in many other countries due to it being analgorithm, and hence it would probably have been ruled unpatentable,even if R, S and A had not been rushed by the NSAs interference.IDEA was developed by Xuejia Lai and James Massey at ETH in Zurich.(Relevant to PGP because IDEA is the symmetric key cipher usedtogether with RSA in PGP).  Also crypto politics relevance in that itis another (of many) examples of the fact that crypto knowledge andexpertise is worldwide, ie why export restrict something which isavailable both sides of the ITAR fence, or even originated *outside*it?  (Strangely, ITAR applies to importing and then re-exporting acrypto system, even if no modifications are made).  There are lots ofother symmetric key ciphers, IDEA is one with a good reputation (noknown practical attacks better than brute-force to date, and a goodkey size), and is just referenced here because of its use in PGP.(some years pass...)Birth of PGPWhile Iraq was still a secret US ally against Iran, Iraqi exchangestudents using the same literature as PRZ later did wrote a working PKcryptosystem for their military (which was using poison gas againstthe Kurds at the time).  Not a peep from the govt., of course.The US government introduces the 1991 Senate Bill 266. This omnibusanti-crime bill had a measure in it that all encryption software musthave a back door in it. An excerpt is in pgpdoc1.txt, distributed withPGP. This bill prompted PRZ to write PGP.  This is what PRZ says inpgpguide.lst in pgp1.0:      The 17 Apr 1991 New York Times reports on an unsettling US Senate     proposal that is part of a counterterrorism bill.  If this nonbinding     resolution became real law, it would force manufacturers of secure     communications equipment to insert special "trap doors" in their     products, so that the Government can read anyone's encrypted messages.       It reads:  "It is the sense of Congress that providers of electronic     communications services and manufacturers of electronic communications      service equipment shall insure that communications systems permit the     Government to obtain the plain text contents of voice, data, and     other communications when appropriately authorized by law."  (This was 1991 Senate Bill 266 and it eventually failed to pass into law.)PRZ wrote pgp1.0.  He implemented RSA encryption, combined with asymmetric key cipher of his own design called Bass-O-Matic.  It laterturned out that Bass-O-Matic was weak, and he replaced it with the useof IDEA for subsequent versions of PGP.  pgp2.0 and later versionshave used IDEA.  There were other differences between pgp1.0 andpgp2.0 and later versions.  pgp1.0 used the MD4 message digestalgorithm, Ron Rivest designed MD5 to fix a weakness which wasdiscovered in MD4, and pgp2.0 and subsequent versions use MD5.  pgp1.0used uuencode for 7 bit transport, where as versions 2.0 and later useradix-64 ascii armor.  pgp2.0 and later versions use ZIP compresioncode (as used by PKZIP the popular DOS compression program, GNU ZIPalso uses this code), where as pgp1.0 used LZHuf (an adaptiveLempel-Ziv Huffman compression alogorithm).PRZ gave PGP 1.0 to some friendsSome friends up loaded onto a few bulletin boards (US only) One friend(allegedly Kelly Goen) went around pay-phones with a portable, anacoustic coupler, and a list of BBS phone numbers uploading and thendriving on to another area.  This cloak and dagger stuff was becauseat the time the USG had some draconian sounding proposed law on thebooks which sounded like it was going to outlaw crypto.  The intentionwas to ensure that PGP was available before this law came into effect,and to avoid being stopped if the USG took interest.Somehow PGP leaked outside the US via the internet.  Information wantsto be free, as someone said: `trying to control the free flow ofinformation on the internet is like trying to plug a sieve with a holein it'.  Also Tim May's quote 'National borders are just speedbumps onthe information superhighway' expresses the point very nicely.People all over the world (yeah outside the US too) start using PGPRSA complains to PRZ that PGP violates their PK patentsPRZ tells RSA to get stuffed, says its the users problem to get alicense - this text from the pgp1.0 documentation lays out PRZsoriginal stance on the patent issue, before this was resolved:     The RSA public key cryptosystem was developed at MIT with Federal     funding from grants from the National Science Foundation and the     Navy.  It is patented by MIT (U.S. patent #4,405,829, issued 20 Sep     1983).  A company called Public Key Partners (PKP) holds the exclusive     commercial license to sell and sub-license the RSA public key     cryptosystem.  For licensing details on the RSA algorithm, you can     contact Robert Fougner at PKP, at 408/735-6779.  The author of this     software implementation of the RSA algorithm is providing this     implementation for educational use only.  Licensing this algorithm     from PKP is the responsibility of you, the user, not Philip     Zimmermann, the author of this software implementation.  The author     assumes no liability for any breach of patent law resulting from the     unlicensed use by the user of the underlying RSA algorithm used in     this software. PGP is considered potentially patent infringing because of 2.6.Eventually PRZ signs an agreement with PKP.  They won't sue him if hestops distributing PGP.  PRZ has stopped distributing PGP -- othershave taken over development and distribution.Illegality taint increases the spread of PGP, generates news, morepeople get a copy to see what the fuss is about(some time passes, PGP gets real popular...)USG decides they don't like PRZThe US gov gets a complaint from Bidzos that PGP breaks a bunch oflaws. When customs first started investigating PRZ they were under theimpression that PGP was developed by PKP and PRZ stole it and was notdistributing it around the world.USG decides that they don't like PRZ because the NSA can't tap allthose internet mail messages anymore.  (the NSA part is speculation,but in my opinion likely true).USG begins investigating PRZ for alleged aiding with ITAR violation.It is clear from the very begining that PRZ did not, and is notencouraging export of PGP, as demonstrated by this excerpt from thepgp1.0 docs:     Export Controls           The Government has made it illegal in many cases to export good     cryptographic technology, and that may include PGP.  This is     determined by volatile State Department policies, not fixed laws.      Many foreign governments impose serious penalties on anyone inside     their country using encrypted communications.  In some countries they     might even shoot you for that.  I will not export this software in     cases when it is illegal to do so under US State Department policies,     and I assume no responsibility for other people exporting it without     my permission.Phil Zimmermann legal defense fund (the yellow ribbon campaign) set upto cover his legal expenses.  This defense fund is now closed sincethe investigation was dropped.  See:http://www.netresponse.com/zldf/(concurrently...)PRZ, MIT sort out earlier patent issuesPGP2.5 is written which uses RSAREF 1.0 in place of MPILIB (also hasbackwards compatibility with older versions impaired to discourage useof older allegedly patent infringing versions).  MIT with PRZsapproval start distributing a version of PGP using RSAs RSAREFlibrary, this ensures that the new version of PGP (pgp 2.5) does notinfringe any patents as it falls within the license for RSAREF1.0.RSADSI threatens MIT with legal action, and eventually backs down whenMIT refuses to budge.  (Recall 1.6 MIT owns part of the RSA patentwhich gave them a unique bargaining position against the somewhatlitigious RSADSI).RSAREF may be slower, but at least after some hassles from RSADSI, aversion of PGP is now 100% legal, and they agree that it is non patentinfringing.MIT begins acting as official US distributor of PGPAs usual, a few milli-seconds (well okay, minutes) after the officialrelease of a new version of PGP, it gets exported from the US.The deal with RSA over RSAREF has fixed the patent related problems inthe US, but it has created a copyright related problem outside the US,(recall 1.6).  RSAREF is a software package copyrighted by RSA, andRSA is not allowed to export it because of ITAR, and their licenseagreement says as much (ie it says that you must not export it, and ifyou do export, you, and the subsequent users of it, are in breach oflicense).  It is therefore supposed that RSA could if they wantedcomplain about this (who knows that they would want to, or whatconceivable benefit it would give them if they did).  This isn'tenough to bother most people, but commercial users, and bigorganisations have lawyers, and are wary of such things.Stale Schumacher put together pgp26i to avoid this problem.  Maindifference between pgp26x and pgp26xi is that pgp26xi uses PRZsoriginal big integer library MPILIB, which is any case faster thanRSADSI's RSAREF, and the lack of the legal kludge noted in 3.3.MIT and PRZ publish PGP internals book.  The book is currentlyavailable throughout the world.  It has complete PGP source code in anOCR font.  The page numbers are inserted in C style comments /* pagenum */ so that they do not interfere with scanning.  See mit press page for ordering info for the book:[insert mit press URL for book]MIT were following on from Phil Karn's fun had at the expense of theNSA and ODTC with his case of the ODTCs ruling that Bruce Schneier'sbook Applied Cryptography was exportable while the disk set (with thevery same source code) was ruled as not exportable.  Phil Karn isappealing at this decision.  See, for documents Phil Karn has scannedon the case:http://www.ka9q.net/export/MIT has asked for permission to export the PGP internals book, so farthe NSA sounds like they want to ban the export of the book, PRZsdeclaration (PRZ made a declaration in connection with Phil Karn'scase against the NSA, the ODTC, and miscellaneous government officials)this was taken from bottom of:http://www.ka9q.net/export/zimm.html ... 10. I believe that the commodity jurisdiction request referred on page 28 of the Justice filing is the one which was filed by MIT Press for my book, PGP: Source Code and Internals. I am further informally advised that the National Security Agency has considered the Request and recommended that the book be controlled for export under the ITAR and that the Department of Commerce has recommended that it not be subject to ITAR controls.Current legal statusPGP is legal both inside and outside the US.  You just need to usepgp262 version inside the US, and pgp262i versions outside the US.If you are in the US and pgp262 does not compile for your platform,another option may be to obtain pgp262i and compile it with -DMIT,which makes it use RSAREF (which keeps RSADSI happy), pgp262i compilesfor a wider range of platforms.See Stale Schumacher's pgp pages for a table of which versions to usein USA/Canada/Rest of world depending on whether you are using in acommercial or a non-commercial setting:http://www.ifi.uio.no/~staalesc/PGP/http://www.ifi.uio.no/~staalesc/PGP/which-version.shtmlIn the US if you are using PGP in a commercial setting, and care aboutpatents, you should purchase a copy of ViaCrypt pgp2.7, here is therelevant quote from the pgp2.6.2i documentation: Ascom-Tech AG has granted permission for the freeware version PGP to use the IDEA cipher in non-commercial uses, everywhere.  In the US and Canada, all commercial or Government users must obtain a licensed version from ViaCrypt, who has a license from Ascom-Tech for the IDEA cipher.  Commercial use outside the US and Canada: RSA is free as RSA is notpatented outside the US, but a license is required from Ascom Systecfor IDEA.  See Ascom's www pages:http://www.ascom.ch/systec http://www.ascom.ch/Web/systec/security/license.htmAscom Systec contact info:Ascom Systec AGIDEA LicensingGewerbeparkCH-5506 MaegenwilSwitzerlandPhone:  +41 62 889 59 54Fax:    +41 62 889 59 54Email:  ITARs viewed from inside the USITAR means that if you are in the US you should not export PGP.  (Yeahit's already available on a few thousand ftp sites around the freeworld, so another export isn't going to make any difference, but theNSA and the ODTC might not see it in that light).Even though controlling the export of freeware software availableworldwide might seem incredibly stupid (not to mention pointless), youshould bear in mind that the penalties for getting successfullyprosecuted for violating ITAR are rather steep.  Up to $1,000,000(US$) fine, and and up to 10 years imprisonment per count of export.They'd probably never do anything to you, PRZ is just a scape goat(someone they can symbolically persecute to discourage others).  Ihave personally seen several people from US sites post crypto sourceand binaries (nautilus, PGP itself even).  Plus of course this:     -export-a-crypto-system-sig -RSA-3-lines-PERL#!/bin/perl -sp0777ihas probably been exported a few hundred thousand times by now.  It'san implementation of RSA encrypt and decrypt in perl and dc - a realcrypto system, which has every right to claim ITAR status if anythingdoes, and yet benefits from being more convienient to use as a .sigthan a uuencoded PGP binary.  See:http://www.cypherspace.org/~adam/rsa/ITARs viewed from outside the USIf you are outside the US, ITAR probably doesn't apply to you.  Youcould, if you could be bothered, down load PGP from a US site, andshort of attempting an extradition for violating a regulation whichonly applies in the US, there would be nothing the NSA, or USG coulddo about it.  Most extradition treaties tend to rely on the actionbeing prosecuted being illegal in both countries.Yeah, I know `tell that to Manuel Noriega' (a Panama citizen who waskidnapped by DEA agents and US military and brought to the US to facetrial for importing/exporting drugs from Panama into the US.  He brokeno Panamanian laws, he is a citizen of Panama, and was in Panama whenhe committed his crime, and he is now languishing in a US jail.However, he was kidnapped for a number of reasons:the USG thought they could get away with it (Panama owedthem a few favours) politically easy to pass of acts of aggression (kidnap bycivilised countries in this day and age?) in the name ofthe `War on Drugs' they thought it was worth it. Noreiga, because he had worked for them on numerous occasions,knew some very dark secrets about (then President) George Bushand the CIA, so the USG felt he had to be "muzzled." There was an election coming up.(The whole situation was very silly anyway because just a few monthsbefore a renegade faction of the Panama Army kidnapped Noriega andturned him over to the the US Army.  They released him.  Thespeculation is that the CIA (who were later themselves implicated indrug smuggling) didn't want him tried in case they were implicated.The presumption is that a few papers were shredded before the USGkidnapping.)Some of these criteria are likely to be missing if there was anattempt to extradite a non-US citizen outside the US for breakingITAR.  One big problem is that crypto is not controlled as much inmost of the free world.  Also the fact that the USG haven't botheredother people within the US who have similarly exported crypto software(examples cited in 6.3) would make the whole situation look rathersilly.Some people speculate that if a non-US person exports/imports softwareresident on US ftp/www sites it is possible that the USG might add theexporter to a list of interesting people and have a talk to them whenthey next visit the US.  If you consider reprisals likely, you mightwant to avoid travelling to the US for a while.A more important consideration is that although a non-US downloader ofPGP from a US site would be effectively immune to the ITAR nonsense,the owner of the (US based) ftp/www site may not be.  You might getthe site owner in trouble for not taking adequate precautions.  Sopoliteness demands that you don't do it.Indeed why bother anyway, because PGP is available from literallythousands of ftp sites, there is bound to be a closer (and hencelikely faster download) copy, without any hoops to jump though.There are some other countries with restrictions on use, import andexport of crypto.  These include France, Russia, Iran, Iraq, China,plus miscellaneous tin-pot dictatorships, and totalitarian regimes.In France you must obtain a license to make private use of crypto.DISSI is quoted as saying that they won't bother private users of PGP,but they would not if asked give permission to use PGP.  See:http://cwis.kub.nl/~frw/people/koops/lawsurvy.htmfor a detailed survey of the crypto laws of many countries.Long live the Pretty Good revolution,Adam BackComments, html bugs to me (Adam Back) at
export-a-crypto-system sigThis is a perl program which implements RSA encryption anddecryption, and is small enough to use as a signature file.  PeterJunger, a law professor in the US, obtained from the US Commercedepartment a written statement  ruling that this program must not be exported from the US.Please use this sig file:     -export-a-crypto-system-sig -RSA-3-lines-PERL#!/bin/perl -sp0777ior more recent 2 line version:print pack"C*",split/\D+/,`echo "16iII*o\U@{$/=$z;[(pop,pop,unpack"H*",<>)]}\EsMsKsN0[lN*1lK[d2%Sa2/d0List of versions, and explanations of how it worksherePERL HACKERS:  The quest for most diminutive munitions programHow to use the programEncrypting / decrypting with perl-rsaGenerating RSA keysUsing PGP keys with perl-rsaIf you know perl here's a break down of     how the program works.The T-shirt of the sigThe above code on a T-shirt.  Get your      munitions-T here.  This      T-shirt used to be technically illegal to export from the US.      The cartoon of the t-shirt of the sigDr Fun cartoon about the shirt  How to become an Arms TraffickerBecome an Arms-Trafficker in one easy step with this great way to registeryour protest of ITAR by Vince Cate.Just click to submit the form and join in the protest.  Lots ofexcellent links.  Have you exported RSA today?  Includes an option toemail a protest letter to US president.The tattoo of the sigRichard White        has a tattoo      of the rsa .sig on his fore arm.               (click image for larger image)Cancer Omega        has a tattoo on his chest.               (click image for larger image)James Melvin        has a tattoo on his arm.               (click image for larger image)Guess that's the end of any foreign trips for them :-)Fun with HTMLhypertext reference with the sig in the URLMedia appearances(label) New York Times by Peter Lewis (US)(sig)Computer Shopper by     Charlie Stross (UK)(sig) New Scientist by Wendy Grossman (UK)(shirt) Wired (magazine, US)(shirt) Canal+ TV show Nulle Part Alleurs (France)(shirt) Nova magazine (France)(sig, shirt) Planette Internet magazine (France)(shirt) BBC TV, the Learning Zone (UK)Pictures of the t-shirt in       the mediaPolitical/legal backgroundWhy it was illegal to export       this 3 line program from the USThat weird beast which was the US ITAR      crypto restrictions (some aspects still remain after the crypto      liberalization)Phil Zimmermann, author of PGP was the subject of a grand jury      investigation for allegedly violating ITAR.Jerome Thorel's       page on the             sig and shirt in the context of the French laws on encryption.Phil Karn    is challening the constitutionality of ITAR in court with the    amusing     Applied Cryptography disk case.Other hacks using the perl-rsa codeDuncan Frissell's      muntions mailing label was       distributed at Computers, Freedom and Privacy '95Crypto Sardines by       Riche (Alex Stewart)      and Rui Mendez.      Export-a-coke-can by the pope.        (local copy)      International Arms Traffickers page by       Vince Cate.Other diminutive crypto hacksVipul Prakash wrote a      GOST in 6 lines of perlClifford Adams wrote an     RSA in pure perl in 5 lines of perlRSA      key generation code in perl by Steve Reid.RSA key gen and encryption in perl, pari and dc as dolphin            t-shirtSmall DeCSS (DVD content scrambling algorithm) in C, perl and      other implementations      DeCSSRSADSI's RC4      symmetric key stream cipher in 3 lines of PERLTwo versions of RC4 in CRSADSI's RC5      symmetric key block cipher in 6 lines of PERLRSADSI's MD5       message digest algorithm in 8 lines of PERL5 by John Allen      The SHA SHA      message digest algorithm in 8 lines of PERL5 by John Allen      Diffie-Hellman      key exchange in 10 lines of C an anonymous posterDiffie-Hellman      in 2 lines of perl (inspired by anonymous's C code)IDEA      in 448 bytes of 80x86 by       Fauzan Mirza      Andrew Kuchling wrote a Python:    RSA-in-4-lines-PythonOne Time Pad in perl and Cbetter OTP in perl on perlmonksChris tattoo of  permonks OTP in perlCrack in 1 line of perl by Alec MuffettComments, html bugs to  (Adam Back) at
Munitions T-shirtThe rsa perl t-shirts are no longer available.  The only remaining related shirt I am aware of is one sold by thinkgeek, which is Vipul Prakash's perl rsa dolphin, rsa key gen and encryption in perl, pari and dc.If you are interested in printing your own t-shirts, all of the artwork that was used to create the shirts is available fordownloadThe rest of this page is of historical value only.Munitions T-shirtThese are the "shirt of the sig".  See the export-a-crypto-system signature page forbackground info.  In the US this shirt was theoretically illegal to export (or even to let aforeign national see!) due to the EARS.  Recent changes mean that you mayneed to notify the USG of intent to export.Pictures(Click either image for bigger image: 60k)Comments, html bugs to me (Adam Back) at
